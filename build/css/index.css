.font-main {
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.font-article,
main section article p {
  font-family: 'Times New Roman', Times, serif;
}
div,
span,
h1,
h2,
h3,
p,
a,
i,
ol,
ul,
li,
fieldset,
form,
label,
input,
address,
section,
header {
  margin: 0px;
  padding: 0px;
  border: 0px;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  box-sizing: border-box;
}
ol,
ul {
  list-style: none;
}
html,
body {
  padding: 0;
  margin: 0;
  height: 100%;
}
body {
  color: #333;
  background: #f1f1f1;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 16px;
  overflow-x: hidden;
}
a {
  text-decoration: none;
  color: #333;
  border-bottom: 1px dotted #333;
}
a:hover {
  background-color: #ffa500;
  border: none;
}
.site-intro header {
  padding-left: 17em;
  position: fixed;
  width: 100%;
  top: 0px;
  height: 65px;
  z-index: 100;
  background-color: #7bc2d4;
  box-shadow: 0px 2px 1px 1px rgba(0,0,0,0.15);
}
.site-intro header h1 {
  color: #fff;
}
.site-intro header h1:before {
  content: 'LOGO';
  margin-right: 20px;
}
.search {
  display: none;
}
.login {
  display: none;
}
.share {
  display: none;
}
.brand {
  display: none;
  height: 130px;
  background: #333;
  text-align: center;
}
.brand span {
  line-height: 130px;
  color: #fff;
}
.navigation,
.site-intro .site-navigation,
.context-options {
  background: #fff;
  position: fixed;
  width: 17em;
  bottom: 0px;
  z-index: 50;
  overflow-x: auto;
  top: 65px;
}
.site-intro .site-navigation {
  z-index: 200;
  top: 0px;
  box-shadow: 1px 2px 1px 1px rgba(0,0,0,0.15);
  left: 0px;
}
.site-intro .site-navigation.toggle {
  background: #f00;
}
.context-options {
  right: 0px;
  right: -17em;
  box-shadow: -1px 1px 0.5px 1px rgba(0,0,0,0.15);
}
.context-options .share {
  position: absolute;
  float: right;
}
.navigation-main >ul>li>a:first-of-type {
  border-bottom: 1px solid #f2f2f2;
}
.navigation-main li {
  display: block;
  cursor: pointer;
}
.navigation-main li a {
  border-bottom: none;
  display: block;
  text-decoration: none;
  text-transform: capitalize;
  color: #333;
}
.navigation-main li a:hover {
  color: #000;
  background-color: #f2f2f2;
}
.navigation-main li.active >a {
  color: #000;
}
.navigation-main >ul>li >a {
  padding: 15px 20px;
}
.navigation-main >ul>li >ul >li.active >a {
  background-color: #f2f2f2;
}
.navigation-main >ul>li >ul >li >a {
  padding: 15px 20px;
}
.navigation-main >ul>li >ul >li >a:after {
  position: absolute;
  right: 10px;
}
.navigation-main >ul>li >ul >li >a.expandable:after {
  content: "+";
}
.navigation-main >ul>li >ul >li >ul {
  display: none;
}
.navigation-main >ul>li >ul >li >ul >li >a {
  padding: 7px 20px 7px 20px;
  color: #808080;
}
.navigation-main >ul>li >ul >li >ul >li >a:hover {
  background-color: inherit;
}
.navigation-main >ul>li >ul >li.active ul {
  display: block;
}
.navigation-main >ul>li >ul >li.active a.expandable:after {
  content: "-";
}
.skip {
  position: fixed;
  left: 0;
  background: #333;
  color: #fff;
  padding: 10px 0;
  letter-spacing: 1px;
  line-height: 1.75em;
  text-align: center;
  text-transform: uppercase;
  top: -12.5em;
  transition: top 0.3s ease;
  width: 100%;
  z-index: 600;
  text-decoration: underline;
  outline: none;
  box-shadow: 0px 2px 1px 1px rgba(0,0,0,0.15);
}
.skip:hover {
  background: #333;
}
.skip:focus {
  top: 0;
}
main {
  padding-top: 65px;
  padding-left: 17em;
}
main section .content {
  position: relative;
  background-color: #fff;
  box-shadow: 0px 1px 0.5px 1px rgba(0,0,0,0.15);
}
main section article {
  padding: 50px;
  color: #333;
  overflow-x: auto;
  max-width: 768px;
  margin: 0px auto;
}
main section article .contacts {
  margin: auto;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-justify-content: center;
  -ms-justify-content: center;
  -ms-flex-pack: center;
      justify-content: center;
}
main section article .contact {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  margin: auto;
  display: inline-block;
  margin: 2em;
}
main section article .contact div {
  margin: auto;
  width: 15em;
  height: 15em;
  border-radius: 7.5em;
  background-size: cover;
  background-position: center;
}
main section article .contact address {
  margin: 1em;
}
main section article .contact address span {
  display: block;
  text-align: center;
  font-weight: 400;
  padding: 2px;
}
main section article .contact address span a {
  padding: 2px;
}
main section article >p:first-of-type {
  margin-bottom: 2em;
  font-size: 1.4em;
  line-height: 1.3em;
  text-align: center;
}
main section article >p:first-of-type:after {
  display: block;
  border-bottom: 1px solid #e2c8ed;
  content: '';
  width: 50%;
  margin: 20px auto;
}
main section article p {
  font-size: 1.2em;
  line-height: 1.4em;
  margin-bottom: 2em;
  text-align: justify;
}
main section article h1 {
  font-size: 3.5em;
  margin-bottom: 0.3em;
  text-align: center;
  text-transform: uppercase;
  font-weight: bold;
  color: #4d4d4d;
}
main section article h2 {
  font-variant: small-caps;
  border-bottom: 1px dotted;
  margin-bottom: 1em;
}
main section article h2 a.anchor {
  visibility: hidden;
  width: 0px;
  padding-top: 65px;
  margin-top: -layout_header-height;
  margin-left: -45px;
  background: none;
  border: none;
}
main section article h2 a.anchor span {
  padding: 10px;
  width: 100px;
}
main section article h2 a.anchor span:after {
  width: 0px;
  content: 'Link';
}
main section article h2:hover a.anchor {
  visibility: visible;
}
main section article blockquote {
  border-left: 5px solid #95d47b;
  margin: 0 0 20px 0;
  padding: 10px 40px;
}
main section article blockquote p {
  margin-bottom: 0px;
  font-style: italic;
}
main section article .article--share {
  position: absolute;
  top: 10px;
  right: 10px;
  color: #b3b3b3;
  font-weight: lighter;
}
main section article .article--share:hover {
  color: #666;
  cursor: pointer;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhcmlhYmxlcy9jb3JlLnN0eWwiLCJpbmRleC5jc3MiLCJfcmVzZXQuc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvbWl4aW5zL3ZlbmRvcnMuc3R5bCIsImJhc2UvaW5kZXguc3R5bCIsIm5hdmlnYXRpb24vdmVydGljYWwvaGVhZGVyL2luZGV4LnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMva291dG8tc3dpc3MvbGliL2tvdXRvLXN3aXNzL3V0aWxpdGllcy9wb3NpdGlvbi5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9zZWFyY2gvaW5kZXguc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvbWl4aW5zL3ZlbmRvcnMtZmxleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9sb2dpbi9pbmRleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9zaGFyZS9pbmRleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9icmFuZC9pbmRleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9uYXYvX2RyYXdlcnMuc3R5bCIsIm5hdmlnYXRpb24vdmVydGljYWwvbmF2L3ZlcnRpY2FsLW1lbnUuc3R5bCIsIm5hdmlnYXRpb24vX2ExMXkuc3R5bCIsImNvbnRlbnQtYXJlYS9pbmRleC5zdHlsIiwiYXJ0aWNsZS9fYXJ0aWNsZS5zdHlsIiwiYXJ0aWNsZS9fY29udGFjdHMuc3R5bCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTtFQUNDLDREQUFBO0NDTEE7QURPRDs7RUFDQyw2Q0FBQTtDQ0pBO0FDS0Q7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUNJLFlBQUE7RUFDQSxhQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsY0FBQTtFQUNBLHlCQUFBO0VDRGEsdUJBQUE7Q0ZrQmhCO0FDZEQ7O0VBQ0ksaUJBQUE7Q0RpQkg7QUNmRDs7RUFDSSxXQUFBO0VBQ0Es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RWYsNEJBQUE7Q2hCMk9EO0FnQjFPQTtFQUNDLFlBQUE7Q2hCNE9EO0FnQjNPQztFVENNLGVBQUE7RVNDTCxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsYUFBQTtDaEI2T0Y7QWdCNU9FO0VBQ0MsYUFBQTtDaEI4T0g7QWV0UEU7RUFDQyxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtDZndQSDtBZTlPRztFUlhJLGVBQUE7RVFhSCxpQ0FBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0Esa0JBQUE7Q2ZnUEo7QWU5T0U7RUFFQyxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7RUFDQSxvQkFBQTtDZitPSDtBZTlPRTtFQUNDLGlCQUFBO0VBQ0EscUJBQUE7RUFDQSxtQkFBQTtFQUNBLDBCQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0NmZ1BIO0FlL09FO0VBQ0MseUJBQUE7RUFDQSwwQkFBQTtFQUNBLG1CQUFBO0NmaVBIO0FlaFBHO0VBQ0MsbUJBQUE7RUFDQSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQ0FBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSxhQUFBO0Nma1BKO0FlalBJO0VBQ0MsY0FBQTtFQUNBLGFBQUE7Q2ZtUEw7QWVsUEs7RUFDQyxXQUFBO0VBQ0EsZ0JBQUE7Q2ZvUE47QWVsUEk7RUFDQyxvQkFBQTtDZm9QTDtBZWxQRTtFQUNDLCtCQUFBO0VBR0EsbUJBQUE7RUFDQSxtQkFBQTtDZmtQSDtBZWpQRztFQUdDLG1CQUFBO0VBQ0EsbUJBQUE7Q2ZpUEo7QWUvT0U7RVZyRUssbUJBQUE7RVV1RUosVUFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EscUJBQUE7Q2ZpUEg7QWVoUEc7RUFDQyxZQUFBO0VBQ0EsZ0JBQUE7Q2ZrUEoiLCJmaWxlIjoiaW5kZXguY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQlJFQUsgUE9JTlRTKi9cbi8vIG1vYmlsZSA6IDBweDsgLy9tb2JpbGUgZmlyc3QsIG5vIHN1cHBvcnQgZm9yIHdlYXJhYmxlc1xudGFibGV0ID0gNzY4cHhcbmxhcHRvcCA9IDEwMjRweFxuZGVza3RvcCA9IDEyMDBweFxuXG4uZm9udC1tYWluXG5cdGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXG5cbi5mb250LWFydGljbGVcblx0Zm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWZcbiIsIi5mb250LW1haW4ge1xuICBmb250LWZhbWlseTogJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbn1cbi5mb250LWFydGljbGUsXG5tYWluIHNlY3Rpb24gYXJ0aWNsZSBwIHtcbiAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XG59XG5kaXYsXG5zcGFuLFxuaDEsXG5oMixcbmgzLFxucCxcbmEsXG5pLFxub2wsXG51bCxcbmxpLFxuZmllbGRzZXQsXG5mb3JtLFxubGFiZWwsXG5pbnB1dCxcbmFkZHJlc3MsXG5zZWN0aW9uLFxuaGVhZGVyIHtcbiAgbWFyZ2luOiAwcHg7XG4gIHBhZGRpbmc6IDBweDtcbiAgYm9yZGVyOiAwcHg7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cbm9sLFxudWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuaHRtbCxcbmJvZHkge1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGhlaWdodDogMTAwJTtcbn1cbmJvZHkge1xuICBjb2xvcjogIzMzMztcbiAgYmFja2dyb3VuZDogI2YxZjFmMTtcbiAgZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufVxuYSB7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgY29sb3I6ICMzMzM7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgIzMzMztcbn1cbmE6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZhNTAwO1xuICBib3JkZXI6IG5vbmU7XG59XG4uc2l0ZS1pbnRybyBoZWFkZXIge1xuICBwYWRkaW5nLWxlZnQ6IDE3ZW07XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMCU7XG4gIHRvcDogMHB4O1xuICBoZWlnaHQ6IDY1cHg7XG4gIHotaW5kZXg6IDEwMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzdiYzJkNDtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMnB4IDFweCAxcHggcmdiYSgwLDAsMCwwLjE1KTtcbiAgYm94LXNoYWRvdzogMHB4IDJweCAxcHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG59XG4uc2l0ZS1pbnRybyBoZWFkZXIgaDEge1xuICBjb2xvcjogI2ZmZjtcbn1cbi5zaXRlLWludHJvIGhlYWRlciBoMTpiZWZvcmUge1xuICBjb250ZW50OiAnTE9HTyc7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cbi5zZWFyY2gge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmxvZ2luIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5zaGFyZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4uYnJhbmQge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDEzMHB4O1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uYnJhbmQgc3BhbiB7XG4gIGxpbmUtaGVpZ2h0OiAxMzBweDtcbiAgY29sb3I6ICNmZmY7XG59XG4ubmF2aWdhdGlvbixcbi5zaXRlLWludHJvIC5zaXRlLW5hdmlnYXRpb24sXG4uY29udGV4dC1vcHRpb25zIHtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB3aWR0aDogMTdlbTtcbiAgYm90dG9tOiAwcHg7XG4gIHotaW5kZXg6IDUwO1xuICBvdmVyZmxvdy14OiBhdXRvO1xuICB0b3A6IDY1cHg7XG59XG4uc2l0ZS1pbnRybyAuc2l0ZS1uYXZpZ2F0aW9uIHtcbiAgei1pbmRleDogMjAwO1xuICB0b3A6IDBweDtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAxcHggMnB4IDFweCAxcHggcmdiYSgwLDAsMCwwLjE1KTtcbiAgYm94LXNoYWRvdzogMXB4IDJweCAxcHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG4gIGxlZnQ6IDBweDtcbn1cbi5zaXRlLWludHJvIC5zaXRlLW5hdmlnYXRpb24udG9nZ2xlIHtcbiAgYmFja2dyb3VuZDogI2YwMDtcbn1cbi5jb250ZXh0LW9wdGlvbnMge1xuICByaWdodDogMHB4O1xuICByaWdodDogLTE3ZW07XG4gIC13ZWJraXQtYm94LXNoYWRvdzogLTFweCAxcHggMC41cHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG4gIGJveC1zaGFkb3c6IC0xcHggMXB4IDAuNXB4IDFweCByZ2JhKDAsMCwwLDAuMTUpO1xufVxuLmNvbnRleHQtb3B0aW9ucyAuc2hhcmUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGZsb2F0OiByaWdodDtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpPmE6Zmlyc3Qtb2YtdHlwZSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjJmMmYyO1xufVxuLm5hdmlnYXRpb24tbWFpbiBsaSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ubmF2aWdhdGlvbi1tYWluIGxpIGEge1xuICBib3JkZXItYm90dG9tOiBub25lO1xuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbiAgY29sb3I6ICMzMzM7XG59XG4ubmF2aWdhdGlvbi1tYWluIGxpIGE6aG92ZXIge1xuICBjb2xvcjogIzAwMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gbGkuYWN0aXZlID5hIHtcbiAgY29sb3I6ICMwMDA7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+YSB7XG4gIHBhZGRpbmc6IDE1cHggMjBweDtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkuYWN0aXZlID5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkgPmEge1xuICBwYWRkaW5nOiAxNXB4IDIwcHg7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+dWwgPmxpID5hOmFmdGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMTBweDtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkgPmEuZXhwYW5kYWJsZTphZnRlciB7XG4gIGNvbnRlbnQ6IFwiK1wiO1xufVxuLm5hdmlnYXRpb24tbWFpbiA+dWw+bGkgPnVsID5saSA+dWwge1xuICBkaXNwbGF5OiBub25lO1xufVxuLm5hdmlnYXRpb24tbWFpbiA+dWw+bGkgPnVsID5saSA+dWwgPmxpID5hIHtcbiAgcGFkZGluZzogN3B4IDIwcHggN3B4IDIwcHg7XG4gIGNvbG9yOiAjODA4MDgwO1xufVxuLm5hdmlnYXRpb24tbWFpbiA+dWw+bGkgPnVsID5saSA+dWwgPmxpID5hOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkuYWN0aXZlIHVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+dWwgPmxpLmFjdGl2ZSBhLmV4cGFuZGFibGU6YWZ0ZXIge1xuICBjb250ZW50OiBcIi1cIjtcbn1cbi5za2lwIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBsZWZ0OiAwO1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xuICBjb2xvcjogI2ZmZjtcbiAgcGFkZGluZzogMTBweCAwO1xuICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICBsaW5lLWhlaWdodDogMS43NWVtO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHRvcDogLTEyLjVlbTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiB0b3AgMC4zcyBlYXNlO1xuICB0cmFuc2l0aW9uOiB0b3AgMC4zcyBlYXNlO1xuICB3aWR0aDogMTAwJTtcbiAgei1pbmRleDogNjAwO1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgb3V0bGluZTogbm9uZTtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMnB4IDFweCAxcHggcmdiYSgwLDAsMCwwLjE1KTtcbiAgYm94LXNoYWRvdzogMHB4IDJweCAxcHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG59XG4uc2tpcDpob3ZlciB7XG4gIGJhY2tncm91bmQ6ICMzMzM7XG59XG4uc2tpcDpmb2N1cyB7XG4gIHRvcDogMDtcbn1cbm1haW4ge1xuICBwYWRkaW5nLXRvcDogNjVweDtcbiAgcGFkZGluZy1sZWZ0OiAxN2VtO1xufVxubWFpbiBzZWN0aW9uIC5jb250ZW50IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAxcHggMC41cHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG4gIGJveC1zaGFkb3c6IDBweCAxcHggMC41cHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSB7XG4gIHBhZGRpbmc6IDUwcHg7XG4gIGNvbG9yOiAjMzMzO1xuICBvdmVyZmxvdy14OiBhdXRvO1xuICBtYXgtd2lkdGg6IDc2OHB4O1xuICBtYXJnaW46IDBweCBhdXRvO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3RzIHtcbiAgbWFyZ2luOiBhdXRvO1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1mbGV4LXdyYXA6IHdyYXA7XG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgLW1zLWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIC5jb250YWN0IHtcbiAgLXdlYmtpdC1mbGV4OiAwIDAgYXV0bztcbiAgLW1zLWZsZXg6IDAgMCBhdXRvO1xuICBmbGV4OiAwIDAgYXV0bztcbiAgbWFyZ2luOiBhdXRvO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMmVtO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgZGl2IHtcbiAgbWFyZ2luOiBhdXRvO1xuICB3aWR0aDogMTVlbTtcbiAgaGVpZ2h0OiAxNWVtO1xuICBib3JkZXItcmFkaXVzOiA3LjVlbTtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgYWRkcmVzcyB7XG4gIG1hcmdpbjogMWVtO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgYWRkcmVzcyBzcGFuIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgcGFkZGluZzogMnB4O1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgYWRkcmVzcyBzcGFuIGEge1xuICBwYWRkaW5nOiAycHg7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSA+cDpmaXJzdC1vZi10eXBlIHtcbiAgbWFyZ2luLWJvdHRvbTogMmVtO1xuICBmb250LXNpemU6IDEuNGVtO1xuICBsaW5lLWhlaWdodDogMS4zZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlID5wOmZpcnN0LW9mLXR5cGU6YWZ0ZXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMmM4ZWQ7XG4gIGNvbnRlbnQ6ICcnO1xuICB3aWR0aDogNTAlO1xuICBtYXJnaW46IDIwcHggYXV0bztcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIHAge1xuICBmb250LXNpemU6IDEuMmVtO1xuICBsaW5lLWhlaWdodDogMS40ZW07XG4gIG1hcmdpbi1ib3R0b206IDJlbTtcbiAgdGV4dC1hbGlnbjoganVzdGlmeTtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIGgxIHtcbiAgZm9udC1zaXplOiAzLjVlbTtcbiAgbWFyZ2luLWJvdHRvbTogMC4zZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGNvbG9yOiAjNGQ0ZDRkO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgaDIge1xuICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIGgyIGEuYW5jaG9yIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB3aWR0aDogMHB4O1xuICBwYWRkaW5nLXRvcDogNjVweDtcbiAgbWFyZ2luLXRvcDogLWxheW91dF9oZWFkZXItaGVpZ2h0O1xuICBtYXJnaW4tbGVmdDogLTQ1cHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIGgyIGEuYW5jaG9yIHNwYW4ge1xuICBwYWRkaW5nOiAxMHB4O1xuICB3aWR0aDogMTAwcHg7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSBoMiBhLmFuY2hvciBzcGFuOmFmdGVyIHtcbiAgd2lkdGg6IDBweDtcbiAgY29udGVudDogJ0xpbmsnO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgaDI6aG92ZXIgYS5hbmNob3Ige1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgYmxvY2txdW90ZSB7XG4gIGJvcmRlci1sZWZ0OiA1cHggc29saWQgIzk1ZDQ3YjtcbiAgbWFyZ2luOiAwIDAgMjBweCAwO1xuICBwYWRkaW5nOiAxMHB4IDQwcHg7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSBibG9ja3F1b3RlIHAge1xuICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIC5hcnRpY2xlLS1zaGFyZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMHB4O1xuICByaWdodDogMTBweDtcbiAgY29sb3I6ICNiM2IzYjM7XG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmFydGljbGUtLXNoYXJlOmhvdmVyIHtcbiAgY29sb3I6ICM2NjY7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiIsIlxuXG4vKlJlc2V0IFN0eWxlcyovXG4vKlxuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLCBoNCwgaDUsIGg2LGJsb2NrcXVvdGUsIHByZSxhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLGNlbnRlcixsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcbmFydGljbGUsIGFzaWRlLCBtZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbywgYnV0dG9uLGRsLCBkdCwgZGQsIG9sLGIsIHUsIGZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcbiovXG5kaXYsIHNwYW4sIGgxLCBoMiwgaDMsIHAsIGEsIGksIG9sLCB1bCwgbGksIGZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgaW5wdXQsIGFkZHJlc3MsIHNlY3Rpb24sIGhlYWRlclxuICAgIG1hcmdpbjogMHB4XG4gICAgcGFkZGluZzogMHB4XG4gICAgYm9yZGVyOiAwcHhcbiAgICBmb250LXNpemU6IDEwMCVcbiAgICBmb250OiBpbmhlcml0XG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveFxuXG5vbCwgdWxcbiAgICBsaXN0LXN0eWxlOiBub25lXG5cbmh0bWwsIGJvZHlcbiAgICBwYWRkaW5nOiAwXG4gICAgbWFyZ2luOiAwXG4gICAgaGVpZ2h0OiAxMDAlXG5cbmJvZHlcbiAgICBjb2xvcjogaW5rLWNvbG9yXG4gICAgYmFja2dyb3VuZDogYmFja2dyb3VuZC1jb2xvclxuICAgIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXG4gICAgZm9udC1zaXplOiAxNnB4XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuXG5cbkBtZWRpYSAobWluLXdpZHRoOiBtZWRpdW0pIHtcbiAgYm9keVxuICAgICAgLy8gZm9udC1zaXplOiAwLjg1cmVtXG4gIFxufSIsImtzLXZlbmRvcnMtcHJlZml4ZXMgPSByZWNvbW1lbmRlZFxuXG5rcy12ZW5kb3IoIHByb3BlcnR5LCB2YWx1ZSwgZmVhdHVyZSA9IG51bGwsIHByZWZpeGVzID0gbnVsbCwgb2ZmaWNpYWwgPSB0cnVlIClcbiAgICB1bmxlc3MgXCJ2ZW5kb3JcIiBpbiBjYWxsZWQtZnJvbVxuICAgICAgICBpZiBmZWF0dXJlIGlzbnQgbnVsbCBhbmQgISggZmVhdHVyZSBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBmb3IgcHJlZml4IGluIGNhbml1c2UtcHJlZml4ZXMoIGZlYXR1cmUgKVxuICAgICAgICAgICAgICAgIHByZWZpeGVkcHJvcGVydHkgPSBcIi1cIiArIHByZWZpeCArIFwiLVwiICsgcHJvcGVydHlcbiAgICAgICAgICAgICAgICB7cHJlZml4ZWRwcm9wZXJ0eX06IHZhbHVlXG4gICAgICAgIGVsc2UgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlXG4gICAgICAgICAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IHJlY29tbWVuZGVkXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeGVzID0ga3MtdmVuZG9ycy1wcmVmaXhlc1xuICAgICAgICAgICAgICAgIGlmIHByZWZpeGVzXG4gICAgICAgICAgICAgICAgICAgIGZvciBwcmVmaXggaW4gcHJlZml4ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeGVkcHJvcGVydHkgPSBcIi1cIiArIHByZWZpeCArIFwiLVwiICsgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcmVmaXhlZHByb3BlcnR5fTogdmFsdWVcbiAgICBpZiBvZmZpY2lhbFxuICAgICAgICB7cHJvcGVydHl9OiB2YWx1ZVxuXG52ZW5kb3IgPSBrcy12ZW5kb3IgdW5sZXNzIGtzLW5vLWNvbmZsaWN0XG5cbnVubGVzcyBrcy1uby1jb25mbGljdFxuICAgIGFuaW1hdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJhbmltYXRpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLWRlbGF5KClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1kZWxheVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24tZGlyZWN0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1kaXJlY3Rpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1kdXJhdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1maWxsLW1vZGVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJhbmltYXRpb24taXRlcmF0aW9uLWNvdW50XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi1uYW1lKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1uYW1lXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi1wbGF5LXN0YXRlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1wbGF5LXN0YXRlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcblxuICAgIGFwcGVhcmFuY2UoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYXBwZWFyYW5jZVwiLCBhcmd1bWVudHMsIHByZWZpeGVzOiB3ZWJraXQgbW96IClcblxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHkoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYmFja2ZhY2UtdmlzaWJpbGl0eVwiLCBhcmd1bWVudHMsIHByZWZpeGVzOiB3ZWJraXQgbXMgKVxuXG4gICAgYmFja2dyb3VuZC1jbGlwKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJhY2tncm91bmQtY2xpcFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYmFja2dyb3VuZC1pbWctb3B0c1wiIClcbiAgICBiYWNrZ3JvdW5kLW9yaWdpbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJiYWNrZ3JvdW5kLW9yaWdpblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYmFja2dyb3VuZC1pbWctb3B0c1wiIClcbiAgICBiYWNrZ3JvdW5kLXNpemUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYmFja2dyb3VuZC1zaXplXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJiYWNrZ3JvdW5kLWltZy1vcHRzXCIgKVxuXG4gICAgYm9yZGVyLWltYWdlLXNvdXJjZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJib3JkZXItaW1hZ2Utc291cmNlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJib3JkZXItaW1hZ2VcIiApXG4gICAgYm9yZGVyLWltYWdlLXNsaWNlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1zbGljZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYm9yZGVyLWltYWdlXCIgKVxuICAgIGJvcmRlci1pbWFnZS13aWR0aCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJib3JkZXItaW1hZ2Utd2lkdGhcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2Utb3V0c2V0KClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1vdXRzZXRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2UtcmVwZWF0KClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1yZXBlYXRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2UoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm9yZGVyLWltYWdlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJib3JkZXItaW1hZ2VcIiApXG5cbiAgICBib3gtc2hhZG93KClcbiAgICAgICAga3MtdmVuZG9yKCBcImJveC1zaGFkb3dcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ib3hzaGFkb3dcIiApXG5cbiAgICBib3gtc2l6aW5nKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJveC1zaXppbmdcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzczMtYm94c2l6aW5nXCIgKVxuXG4gICAgY2xpcC1wYXRoKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNsaXAtcGF0aFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWNsaXAtcGF0aFwiIClcblxuICAgIGNvbHVtbi1jb3VudCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tY291bnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1maWxsKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1maWxsXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tZ2FwKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1nYXBcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1ydWxlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1ydWxlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tcnVsZS1jb2xvcigpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tcnVsZS1jb2xvclwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLXJ1bGUtc3R5bGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLXJ1bGUtc3R5bGVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1ydWxlLXdpZHRoKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1ydWxlLXdpZHRoXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tc3BhbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tc3BhblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIilcbiAgICBjb2x1bW4td2lkdGgoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLXdpZHRoXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW5zKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbnNcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuXG4gICAgZ3JpZCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWFyZWEoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1hcmVhXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWF1dG8tY29sdW1ucygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWF1dG8tY29sdW1uc1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1hdXRvLWZsb3coKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1hdXRvLWZsb3dcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtYXV0by1wb3NpdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWF1dG8tcG9zaXRpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtYXV0by1yb3dzKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtYXV0by1yb3dzXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWNvbHVtbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWNvbHVtblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1jb2x1bW4tZW5kKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtY29sdW1uLWVuZFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1jb2x1bW4tc3RhcnQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1jb2x1bW4tc3RhcnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtcm93KClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtcm93XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXJvdy1lbmQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1yb3ctZW5kXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXJvdy1zdGFydCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXJvdy1zdGFydFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC10ZW1wbGF0ZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXRlbXBsYXRlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtdGVtcGxhdGUtYXJlYXNcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1ucygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXRlbXBsYXRlLWNvbHVtbnNcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtdGVtcGxhdGUtcm93cygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXRlbXBsYXRlLXJvd3NcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuXG4gICAgaHlwaGVucygpXG4gICAgICAgIGtzLXZlbmRvciggXCJoeXBoZW5zXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtaHlwaGVuc1wiIClcblxuICAgIGp1c3RpZnktY29udGVudCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJqdXN0aWZ5LWNvbnRlbnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBtYXNrKClcbiAgICAgICAga3MtdmVuZG9yKCBcIm1hc2tcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1tYXNrc1wiIClcblxuICAgIG9wYWNpdHkoIHZhbHVlIClcbiAgICAgICAgaWYgdmFsdWUgPT0gaW5oZXJpdCBvciB2YWx1ZSA9PSBpbml0aWFsXG4gICAgICAgICAgICAtbXMtZmlsdGVyIHZhbHVlXG4gICAgICAgICAgICBmaWx0ZXIgdmFsdWVcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdmFsID0gcm91bmQoIHZhbHVlICogMTAwIClcbiAgICAgICAgICAgIGlmIHZhbCA9PSAxMDBcbiAgICAgICAgICAgICAgICAtbXMtZmlsdGVyOiBub25lXG4gICAgICAgICAgICAgICAgZmlsdGVyOiBub25lXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgLW1zLWZpbHRlcjogJ1wicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9JXMpXCInICUgdmFsXG4gICAgICAgICAgICAgICAgZmlsdGVyOiAnYWxwaGEob3BhY2l0eT0lcyknICUgdmFsXG4gICAgICAgIG9wYWNpdHk6IHZhbHVlXG5cbiAgICBvcmRlcigpXG4gICAgICAgIGtzLXZlbmRvciggXCJvcmRlclwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIHBlcnNwZWN0aXZlKClcbiAgICAgICAgaWYgY3VycmVudC1wcm9wZXJ0eVsgMCBdIGlzIFwicGVyc3BlY3RpdmVcIlxuICAgICAgICAgICAga3MtdmVuZG9yKCBcInBlcnNwZWN0aXZlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zM2RcIiApXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHVucXVvdGUoIFwicGVyc3BlY3RpdmUoXCIgKyBhcmd1bWVudHMgKyBcIilcIiApXG5cbiAgICBwZXJzcGVjdGl2ZS1vcmlnaW4oKVxuICAgICAgICBrcy12ZW5kb3IoIFwicGVyc3BlY3RpdmUtb3JpZ2luXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zM2RcIiApXG5cbiAgICB0cmFuc2Zvcm0oKVxuICAgICAgICBrcy12ZW5kb3IoIFwidHJhbnNmb3JtXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zMmRcIiApXG4gICAgdHJhbnNmb3JtLW9yaWdpbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2Zvcm0tb3JpZ2luXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zMmRcIiApXG4gICAgdHJhbnNmb3JtLXN0eWxlKClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zZm9ybS1zdHlsZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwidHJhbnNmb3JtczNkXCIgKVxuXG4gICAgdHJhbnNpdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi1kZWxheSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLWRlbGF5XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi1wcm9wZXJ0eSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLXByb3BlcnR5XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtdHJhbnNpdGlvbnNcIiApXG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwidHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy10cmFuc2l0aW9uc1wiIClcblxuICAgIHVzZXItc2VsZWN0KCB2YWx1ZSApXG4gICAgICAgIGtzLXZlbmRvciggXCJ1c2VyLXNlbGVjdFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwidXNlci1zZWxlY3Qtbm9uZVwiIClcbiIsIkBpbXBvcnQgXCJfdmFyc1wiXG5cbmFcblx0dGV4dC1kZWNvcmF0aW9uOiBub25lXG5cdGNvbG9yOiBpbmstY29sb3Jcblx0Ym9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZCBpbmstY29sb3Jcblx0Jjpob3ZlclxuXHRcdGJhY2tncm91bmQtY29sb3I6IGxpbmstYmctY29sb3Jcblx0XHRib3JkZXI6IG5vbmUiLCIuc2l0ZS1pbnRyb1xuXHRoZWFkZXJcblx0XHRwYWRkaW5nLWxlZnQ6IGxheW91dF9kcmF3ZXItd2lkdGhcblx0XHRwb3NpdGlvbjpmaXhlZFxuXHRcdHdpZHRoOiAxMDAlXG5cdFx0dG9wOjBweFxuXHRcdGhlaWdodDogbGF5b3V0X2hlYWRlci1oZWlnaHRcblx0XHR6LWluZGV4OiAxMDBcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiBwcmltYXJ5LWNvbG9yXG5cdFx0X3NoYWRvdygyKVxuXHRcdFxuXHRcdGgxXG5cdFx0XHRjb2xvcjogcHJpbWFyeS1pbmstY29sb3Jcblx0XHRcdCY6YmVmb3JlXG5cdFx0XHRcdGNvbnRlbnQ6ICdMT0dPJ1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6IDIwcHgiLCJrcy1wb3NpdGlvbiggcG9zLCB2YWx1ZXMgKVxuICAgIGlmIGxhc3QoIHZhbHVlcyApID09IFwiIWltcG9ydGFudFwiXG4gICAgICAgIF92b2lkID0gcG9wKCB2YWx1ZXMgKVxuICAgICAgICBpbXBvcnRhbnQgPSBcIiFpbXBvcnRhbnRcIlxuICAgIGVsc2VcbiAgICAgICAgaW1wb3J0YW50ID0gXCJcIlxuICAgIGlmIHBvcyA9PSBzdGlja3lcbiAgICAgICAgaWYgISggXCJjc3Mtc3RpY2t5XCIgaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBjYW5pdXNlLXByZWZpeGVzKCBcImNzcy1zdGlja3lcIiApXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHVucXVvdGUoIFwiLVwiICsgcHJlZml4ICsgXCItc3RpY2t5IFwiICsgaW1wb3J0YW50IClcbiAgICAgICAgZWxzZSBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2VcbiAgICAgICAgICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgcmVjb21tZW5kZWRcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ZXMgPSBrcy12ZW5kb3JzLXByZWZpeGVzXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4ZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBwcmVmaXhlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHVucXVvdGUoIFwiLVwiICsgcHJlZml4ICsgXCItc3RpY2t5IFwiICsgaW1wb3J0YW50IClcbiAgICAgICAgcG9zaXRpb246IHVucXVvdGUoIFwic3RpY2t5IFwiICsgaW1wb3J0YW50IClcbiAgICBlbHNlXG4gICAgICAgIHBvc2l0aW9uOiBwb3MgdW5xdW90ZSggaW1wb3J0YW50IClcbiAgICBpZiBsZW5ndGgoIHZhbHVlcyApID09IDEgJiYgdmFsdWVzWyAwIF0gIT0gZmFsc2VcbiAgICAgICAgdG9wOiB2YWx1ZXNbIDAgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKVxuICAgICAgICByaWdodDogdmFsdWVzWyAwIF0gdW5xdW90ZSggaW1wb3J0YW50IClcbiAgICAgICAgYm90dG9tOiB2YWx1ZXNbIDAgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKVxuICAgICAgICBsZWZ0OiB2YWx1ZXNbIDAgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKVxuICAgIGlmIGxlbmd0aCggdmFsdWVzICkgPT0gMlxuICAgICAgICB0b3A6IHZhbHVlc1sgMCBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMCBdICE9IGZhbHNlXG4gICAgICAgIHJpZ2h0OiB2YWx1ZXNbIDEgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDEgXSAhPSBmYWxzZVxuICAgICAgICBib3R0b206IHZhbHVlc1sgMCBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMCBdICE9IGZhbHNlXG4gICAgICAgIGxlZnQ6IHZhbHVlc1sgMSBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMSBdICE9IGZhbHNlXG4gICAgaWYgbGVuZ3RoKCB2YWx1ZXMgKSA9PSAzXG4gICAgICAgIHRvcDogdmFsdWVzWyAwIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAwIF0gIT0gZmFsc2VcbiAgICAgICAgcmlnaHQ6IHZhbHVlc1sgMSBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMSBdICE9IGZhbHNlXG4gICAgICAgIGJvdHRvbTogdmFsdWVzWyAyIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAyIF0gIT0gZmFsc2VcbiAgICAgICAgbGVmdDogdmFsdWVzWyAxIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAxIF0gIT0gZmFsc2VcbiAgICBpZiBsZW5ndGgoIHZhbHVlcyApID09IDRcbiAgICAgICAgdG9wOiB2YWx1ZXNbIDAgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDAgXSAhPSBmYWxzZVxuICAgICAgICByaWdodDogdmFsdWVzWyAxIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAxIF0gIT0gZmFsc2VcbiAgICAgICAgYm90dG9tOiB2YWx1ZXNbIDIgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDIgXSAhPSBmYWxzZVxuICAgICAgICBsZWZ0OiB2YWx1ZXNbIDMgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDMgXSAhPSBmYWxzZVxuXG5rcy1zdGF0aWMoIHZhbHVlcy4uLiApXG4gICAga3MtcG9zaXRpb24oIHN0YXRpYywgdmFsdWVzIClcblxua3MtcmVsYXRpdmUoIHZhbHVlcy4uLiApXG4gICAga3MtcG9zaXRpb24oIHJlbGF0aXZlLCB2YWx1ZXMgKVxuXG5rcy1hYnNvbHV0ZSggdmFsdWVzLi4uIClcbiAgICBrcy1wb3NpdGlvbiggYWJzb2x1dGUsIHZhbHVlcyApXG5cbmtzLWZpeGVkKCB2YWx1ZXMuLi4gKVxuICAgIGtzLXBvc2l0aW9uKCBmaXhlZCwgdmFsdWVzIClcblxua3Mtc3RpY2t5KCB2YWx1ZXMuLi4gKVxuICAgIGtzLXBvc2l0aW9uKCBzdGlja3ksIHZhbHVlcyApXG5cbnVubGVzcyBrcy1uby1jb25mbGljdFxuICAgIHN0YXRpYyggdmFsdWVzLi4uIClcbiAgICAgICAga3MtcG9zaXRpb24oIHN0YXRpYywgdmFsdWVzIClcblxuICAgIHJlbGF0aXZlKCB2YWx1ZXMuLi4gKVxuICAgICAgICBrcy1wb3NpdGlvbiggcmVsYXRpdmUsIHZhbHVlcyApXG5cbiAgICBhYnNvbHV0ZSggdmFsdWVzLi4uIClcbiAgICAgICAga3MtcG9zaXRpb24oIGFic29sdXRlLCB2YWx1ZXMgKVxuXG4gICAgZml4ZWQoIHZhbHVlcy4uLiApXG4gICAgICAgIGtzLXBvc2l0aW9uKCBmaXhlZCwgdmFsdWVzIClcblxuICAgIHN0aWNreSggdmFsdWVzLi4uIClcbiAgICAgICAga3MtcG9zaXRpb24oIHN0aWNreSwgdmFsdWVzIClcblxuICAgIHBvc2l0aW9uKCB2YWx1ZSwgdmFsdWVzLi4uIClcbiAgICAgICAga3MtcG9zaXRpb24oIHZhbHVlLCB2YWx1ZXMgKVxuIiwiLnNlYXJjaFxuXHRkaXNwbGF5OiBub25lIiwiX2tzLXN1cHBvcnQtb2xkLWZsZXgtaW1wbGVtZW50YXRpb24oKVxuICAgIHJldHVybiBrcy1zdXBwb3J0LXNhZmFyaSA8PSA2IG9yIGtzLXN1cHBvcnQtYW5kcm9pZC1icm93c2VyIDw9IDQuMyBvciBrcy1zdXBwb3J0LWNocm9tZSA8PSAyMCBvciBrcy1zdXBwb3J0LWlvcy1zYWZhcmkgPD0gNi4xIG9yIGtzLXN1cHBvcnQtYmxhY2tiZXJyeS1icm93c2VyIDw9IDdcblxua3MtZGlzcGxheSggdmFsdWUsIGFyZ3MuLi4gKVxuICAgIGlmIHZhbHVlID09IGZsZXhcbiAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlIGFuZCAhKCBmbGV4IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzICkgYW5kICEoIGZsZXhib3ggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgaWYgX2tzLXN1cHBvcnQtb2xkLWZsZXgtaW1wbGVtZW50YXRpb24oKVxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94IGFyZ3NcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggXCJmbGV4Ym94XCIgKVxuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIndlYmtpdFwiXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleCBhcmdzXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4IGlzIFwibW96XCJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogLW1vei1ib3ggYXJnc1xuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIm1zXCJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogLW1zLWZsZXhib3ggYXJnc1xuICAgICAgICBkaXNwbGF5OiBmbGV4IGFyZ3NcbiAgICBlbHNlIGlmIHZhbHVlID09IGlubGluZS1mbGV4XG4gICAgICAgIGlmIGtzLXZlbmRvcnMtcHJlZml4ZXMgaXNudCBmYWxzZSBhbmQgISggZmxleCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApIGFuZCAhKCBmbGV4Ym94IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzIClcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggXCJmbGV4Ym94XCIgKVxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHVucXVvdGUoIFwiLVwiICsgcHJlZml4ICsgXCItaW5saW5lLWZsZXhcIiApIGFyZ3NcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXggYXJnc1xuICAgIGVsc2VcbiAgICAgICAgZGlzcGxheTogdmFsdWUgYXJnc1xuXG5kaXNwbGF5ID0ga3MtZGlzcGxheSB1bmxlc3Mga3Mtbm8tY29uZmxpY3RcblxudW5sZXNzIGtzLW5vLWNvbmZsaWN0XG4gICAgZmxleC1ncm93KClcbiAgICAgICAga3MtdmVuZG9yKCBcImZsZXgtZ3Jvd1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIGZsZXgtYmFzaXMoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZmxleC1iYXNpc1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIGZsZXgtZGlyZWN0aW9uKCB2YWx1ZSwgYXJncy4uLiApXG4gICAgICAgIGlmIGtzLXZlbmRvcnMtcHJlZml4ZXMgaXNudCBmYWxzZSBhbmQgISggZmxleCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApIGFuZCAhKCBmbGV4Ym94IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzIClcbiAgICAgICAgICAgIGlmIF9rcy1zdXBwb3J0LW9sZC1mbGV4LWltcGxlbWVudGF0aW9uKClcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyByb3dcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsIGFyZ3NcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyByb3ctcmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiByZXZlcnNlIGFyZ3NcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWwgYXJnc1xuICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIGNvbHVtbi1yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZSBhcmdzXG4gICAgICAgICAgICBmb3IgcHJlZml4IGluIGNhbml1c2UtcHJlZml4ZXMoIFwiZmxleGJveFwiIClcbiAgICAgICAgICAgICAgICBpZiBwcmVmaXggaXMgXCJtb3pcIiBhbmQga3Mtc3VwcG9ydC1maXJlZm94IDw9IDIwXG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtb3JpZW50OiB2ZXJ0aWNhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1kaXJlY3Rpb246IG5vcm1hbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHJvdy1yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1vcmllbnQ6IHZlcnRpY2FsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWRpcmVjdGlvbjogcmV2ZXJzZSBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIGNvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtb3JpZW50OiBob3Jpem9udGFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWRpcmVjdGlvbjogbm9ybWFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgY29sdW1uLXJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LW9yaWVudDogaG9yaXpvbnRhbCBhcmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1kaXJlY3Rpb246IHJldmVyc2UgYXJnc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgcm93XG4gICAgICAgICAgICAgICAgICAgICAgICAte3ByZWZpeH0tZmxleC1kaXJlY3Rpb246IHVucXVvdGUoIFwicm93XCIgKSBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgdmFsdWUgaXMgY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAte3ByZWZpeH0tZmxleC1kaXJlY3Rpb246IHVucXVvdGUoIFwiY29sdW1uXCIgKSBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC17cHJlZml4fS1mbGV4LWRpcmVjdGlvbjogdmFsdWUgYXJnc1xuICAgICAgICBpZiB2YWx1ZSBpcyByb3dcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiB1bnF1b3RlKCBcInJvd1wiICkgYXJnc1xuICAgICAgICBlbHNlIGlmIHZhbHVlIGlzIGNvbHVtblxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHVucXVvdGUoIFwiY29sdW1uXCIgKSBhcmdzXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiB2YWx1ZSBhcmdzXG5cbiAgICBmbGV4LWZsb3coIGRpciwgd3JhcC10eXBlLCBhcmdzLi4uIClcbiAgICAgICAgaWYgZGlyIGlzIHJvd1xuICAgICAgICAgICAgZGlyID0gdW5xdW90ZSggXCJyb3dcIiApXG4gICAgICAgIGlmIGRpciBpcyBjb2x1bW5cbiAgICAgICAgICAgIGRpciA9IHVucXVvdGUoIFwiY29sdW1uXCIgKVxuICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2UgYW5kICEoIGZsZXggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKSBhbmQgISggZmxleGJveCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBmb3IgcHJlZml4IGluIGNhbml1c2UtcHJlZml4ZXMoIFwiZmxleGJveFwiIClcbiAgICAgICAgICAgICAgICAte3ByZWZpeH0tZmxleC1mbG93OiBkaXIgd3JhcC10eXBlIGFyZ3NcbiAgICAgICAgZmxleC1mbG93OiBkaXIgd3JhcC10eXBlIGFyZ3NcblxuICAgIGZsZXgtc2hyaW5rKClcbiAgICAgICAga3MtdmVuZG9yKCBcImZsZXgtc2hyaW5rXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgZmxleC13cmFwKClcbiAgICAgICAga3MtdmVuZG9yKCBcImZsZXgtd3JhcFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIGZsZXgoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZmxleFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIGFsaWduLWNvbnRlbnQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYWxpZ24tY29udGVudFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIGFsaWduLWl0ZW1zKCB2YWx1ZSwgYXJncy4uLiApXG4gICAgICAgIGlmIGtzLXZlbmRvcnMtcHJlZml4ZXMgaXNudCBmYWxzZSBhbmQgISggZmxleCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApIGFuZCAhKCBmbGV4Ym94IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzIClcbiAgICAgICAgICAgIGlmIF9rcy1zdXBwb3J0LW9sZC1mbGV4LWltcGxlbWVudGF0aW9uKClcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBmbGV4LXN0YXJ0XG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWFsaWduOiBzdGFydCBhcmdzXG4gICAgICAgICAgICAgICAgZWxzZSBpZiB2YWx1ZSBpcyBmbGV4LWVuZFxuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1hbGlnbjogZW5kIGFyZ3NcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWFsaWduOiB2YWx1ZSBhcmdzXG4gICAgICAgICAgICBmb3IgcHJlZml4IGluIGNhbml1c2UtcHJlZml4ZXMoIFwiZmxleGJveFwiIClcbiAgICAgICAgICAgICAgICBpZiBwcmVmaXggaXMgXCJtb3pcIiBhbmQga3Mtc3VwcG9ydC1maXJlZm94IDw9IDIwXG4gICAgICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIGZsZXgtc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWFsaWduOiBzdGFydCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgdmFsdWUgaXMgZmxleC1lbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWFsaWduOiBlbmQgYXJnc1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1hbGlnbjogdmFsdWUgYXJnc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgLXtwcmVmaXh9LWFsaWduLWl0ZW1zOiB2YWx1ZSBhcmdzXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogdmFsdWUgYXJnc1xuXG4gICAgYWxpZ24tc2VsZigpXG4gICAgICAgIGtzLXZlbmRvciggXCJhbGlnbi1zZWxmXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuIiwiLmxvZ2luXG5cdGRpc3BsYXk6IG5vbmUiLCIuc2hhcmVcblx0ZGlzcGxheTogbm9uZSIsIi5icmFuZFxuXHRkaXNwbGF5OiBub25lIC8vVE9ET1xuXHRoZWlnaHQ6IDIqKGxheW91dF9oZWFkZXItaGVpZ2h0KVxuXHRiYWNrZ3JvdW5kOiBpbmstY29sb3Jcblx0dGV4dC1hbGlnbjogY2VudGVyXG5cdHNwYW5cblx0XHRsaW5lLWhlaWdodDogMioobGF5b3V0X2hlYWRlci1oZWlnaHQpXG5cdFx0Y29sb3I6IHdoaXRlIiwiLm5hdmlnYXRpb25cblx0YmFja2dyb3VuZDogcGFwZXItY29sb3Jcblx0cG9zaXRpb246IGZpeGVkXG5cdHdpZHRoOiBsYXlvdXRfZHJhd2VyLXdpZHRoXG5cdGJvdHRvbTogMHB4XG5cdHotaW5kZXg6IDUwXG5cdG92ZXJmbG93LXg6IGF1dG9cblx0dG9wOiBsYXlvdXRfaGVhZGVyLWhlaWdodFxuXHRcdFxuLnNpdGUtaW50cm9cblx0LnNpdGUtbmF2aWdhdGlvblxuXHRcdEBleHRlbmRzIC5uYXZpZ2F0aW9uXG5cdFx0ei1pbmRleDogMjAwXG5cdFx0dG9wOiAwcHhcblx0XHRfc2hhZG93KDIsMSlcblx0XHRsZWZ0OiAwcHgvLy0obGF5b3V0X2RyYXdlci13aWR0aClcblx0XHQmLnRvZ2dsZVxuXHRcdFx0YmFja2dyb3VuZDogcmVkXG5cdFx0XG4uY29udGV4dC1vcHRpb25zXG5cdEBleHRlbmRzIC5uYXZpZ2F0aW9uXG5cdHJpZ2h0OiAwcHhcblx0cmlnaHQ6IC0obGF5b3V0X2RyYXdlci13aWR0aClcblx0X3NoYWRvdygxLC0xKVxuXHQuc2hhcmVcblx0XHRwb3NpdGlvbjphYnNvbHV0ZTtcblx0XHRmbG9hdDpyaWdodFxuIiwiLm5hdmlnYXRpb24tbWFpblxuXHQ+dWw+bGk+YTpmaXJzdC1vZi10eXBlXG5cdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGRhcmtlbihwYXBlci1jb2xvciwgNSlcblx0bGlcblx0XHRkaXNwbGF5OiBibG9ja1xuXHRcdGN1cnNvcjogcG9pbnRlclxuXHRcdGFcblx0XHRcdGJvcmRlci1ib3R0b206IG5vbmVcblx0XHRcdGRpc3BsYXk6YmxvY2tcblx0XHRcdHRleHQtZGVjb3JhdGlvbjogbm9uZVxuXHRcdFx0dGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVcblx0XHRcdGNvbG9yOiBpbmstY29sb3Jcblx0XHRcdCY6aG92ZXJcblx0XHRcdFx0Y29sb3I6IGRhcmtlbihpbmstY29sb3IsIDIwKVxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4ocGFwZXItY29sb3IsIDUpXG5cdFx0Ji5hY3RpdmVcblx0XHRcdD5hXG5cdFx0XHRcdGNvbG9yOiBkYXJrZW4oaW5rLWNvbG9yLCAyMClcblx0PnVsPmxpXG5cdFx0PmFcblx0XHRcdHBhZGRpbmc6IDE1cHggMjBweFxuXHRcdD51bFxuXHRcdFx0PmxpXG5cdFx0XHRcdCYuYWN0aXZlXG5cdFx0XHRcdFx0PmFcblx0XHRcdFx0XHRcdGJhY2tncm91bmQtY29sb3I6IGRhcmtlbihwYXBlci1jb2xvciwgNSlcblx0XHRcdFx0PmFcblx0XHRcdFx0XHRwYWRkaW5nOiAxNXB4IDIwcHhcblx0XHRcdFx0XHQmOmFmdGVyXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGVcblx0XHRcdFx0XHRcdHJpZ2h0OiAxMHB4XG5cdFx0XHRcdFx0Ji5leHBhbmRhYmxlOmFmdGVyXG5cdFx0XHRcdFx0XHRjb250ZW50OiBcIitcIlxuXHRcdFx0XHQ+dWxcblx0XHRcdFx0XHRkaXNwbGF5OiBub25lXG5cdFx0XHRcdFx0PmxpXG5cdFx0XHRcdFx0XHQ+YVxuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOiA3cHggMjBweCA3cHggMjBweFxuXHRcdFx0XHRcdFx0XHRjb2xvcjogbGlnaHRlbihpbmstY29sb3IsIDMwKVxuXHRcdFx0XHRcdFx0XHQmOmhvdmVyXG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdFxuXHRcdFx0XHQmLmFjdGl2ZVxuXHRcdFx0XHRcdHVsXG5cdFx0XHRcdFx0XHRkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHRcdGEuZXhwYW5kYWJsZTphZnRlclxuXHRcdFx0XHRcdFx0Y29udGVudDogXCItXCIiLCIuc2tpcFxuXHRwb3NpdGlvbjogZml4ZWRcblx0bGVmdDogMFxuXHRiYWNrZ3JvdW5kOiBpbmstY29sb3Jcblx0Y29sb3I6ICNmZmYvL1RPRE9cblx0cGFkZGluZzogMTBweCAwXG5cdGxldHRlci1zcGFjaW5nOiAxcHhcblx0bGluZS1oZWlnaHQ6IDEuNzVlbVxuXHR0ZXh0LWFsaWduOiBjZW50ZXJcblx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZVxuXHR0b3A6IC0xMi41ZW1cblx0dHJhbnNpdGlvbjogdG9wIDAuM3MgZWFzZVxuXHR3aWR0aDogMTAwJVxuXHR6LWluZGV4OiA2MDBcblx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmVcblx0b3V0bGluZTogbm9uZVxuXHRfc2hhZG93KDIpXG5cdCY6aG92ZXJcblx0XHRiYWNrZ3JvdW5kOiBpbmstY29sb3Jcblx0Jjpmb2N1cyBcblx0XHR0b3A6IDAiLCJtYWluXG5cdHBhZGRpbmctdG9wOiBsYXlvdXRfaGVhZGVyLWhlaWdodDtcblx0cGFkZGluZy1sZWZ0OiBsYXlvdXRfZHJhd2VyLXdpZHRoOyIsIm1haW4gXG5cdHNlY3Rpb25cblx0XHQvLyBwYWRkaW5nOiA1MHB4XG5cdFx0XG5cdFx0LmNvbnRlbnRcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZVxuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogcGFwZXItY29sb3Jcblx0XHRcdF9zaGFkb3coMSlcblx0XHRcdFxuXHRcdGFydGljbGVcblxuXHRcdFx0QGltcG9ydCBcIl9jb250YWN0c1wiXG5cdFx0XHRcblx0XHRcdHBhZGRpbmc6IDUwcHhcblx0XHRcdGNvbG9yOiBpbmstY29sb3Jcblx0XHRcdG92ZXJmbG93LXg6IGF1dG9cblx0XHRcdG1heC13aWR0aDogNzY4cHg7XG5cdFx0XHRtYXJnaW46IDBweCBhdXRvO1xuXHRcdFx0XG5cdFx0XHQ+cDpmaXJzdC1vZi10eXBlXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDJlbVxuXHRcdFx0XHRmb250LXNpemU6IDEuNGVtXG5cdFx0XHRcdGxpbmUtaGVpZ2h0OiAxLjNlbVxuXHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXJcblx0XHRcdFx0Ly8gJjo6Zmlyc3QtbGV0dGVyXG5cdFx0XHRcdC8vIFx0Zm9udC1zaXplOiAyLjVlbVxuXHRcdFx0XHQvLyBcdGZsb2F0OiBsZWZ0XG5cdFx0XHRcdC8vIFx0cGFkZGluZzogMTBweCAyMHB4O1xuXHRcdFx0XHQvLyBcdGhlaWdodDogNjRweDtcblx0XHRcdFx0Ly8gXHRtYXJnaW4tcmlnaHQ6IDEwcHg7XG5cdFx0XHRcdC8vIFx0bGluZS1oZWlnaHQ6IDFlbVxuXHRcdFx0XHQvLyBcdGJvcmRlcjogNHB4IHNvbGlkIG9yYW5nZVxuXHRcdFx0XHQvLyBcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHRcdCY6YWZ0ZXJcblx0XHRcdFx0XHRkaXNwbGF5OmJsb2NrXG5cdFx0XHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0ZW4odGVydGlhcnktY29sb3IsIDIwKVxuXHRcdFx0XHRcdGNvbnRlbnQ6ICcnXG5cdFx0XHRcdFx0d2lkdGg6IDUwJVxuXHRcdFx0XHRcdG1hcmdpbjogMjBweCBhdXRvXG5cdFx0XHRcdFx0XG5cdFx0XHRwXG5cdFx0XHRcdEBleHRlbmRzIC5mb250LWFydGljbGVcblx0XHRcdFx0Zm9udC1zaXplOiAxLjJlbVxuXHRcdFx0XHRsaW5lLWhlaWdodDogMS40ZW1cblx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMmVtXG5cdFx0XHRcdHRleHQtYWxpZ246IGp1c3RpZnlcblx0XHRcdGgxXG5cdFx0XHRcdGZvbnQtc2l6ZTogMy41ZW1cblx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMC4zZW07XG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlclxuXHRcdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlXG5cdFx0XHRcdGZvbnQtd2VpZ2h0OiBib2xkXG5cdFx0XHRcdGNvbG9yOiBsaWdodGVuKGluay1jb2xvciwgMTApXG5cdFx0XHRoMlxuXHRcdFx0XHRmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHNcblx0XHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAxZW1cblx0XHRcdFx0YS5hbmNob3Jcblx0XHRcdFx0XHR2aXNpYmlsaXR5OiBoaWRkZW5cblx0XHRcdFx0XHR3aWR0aDowcHhcblx0XHRcdFx0XHRwYWRkaW5nLXRvcDogbGF5b3V0X2hlYWRlci1oZWlnaHRcblx0XHRcdFx0XHRtYXJnaW4tdG9wOiAtbGF5b3V0X2hlYWRlci1oZWlnaHRcblx0XHRcdFx0XHRtYXJnaW4tbGVmdDogLTQ1cHg7XG5cdFx0XHRcdFx0YmFja2dyb3VuZDpub25lXG5cdFx0XHRcdFx0Ym9yZGVyOm5vbmVcblx0XHRcdFx0XHRzcGFuXG5cdFx0XHRcdFx0XHRwYWRkaW5nOiAxMHB4XG5cdFx0XHRcdFx0XHR3aWR0aDoxMDBweFxuXHRcdFx0XHRcdFx0JjphZnRlclxuXHRcdFx0XHRcdFx0XHR3aWR0aDogMHB4XG5cdFx0XHRcdFx0XHRcdGNvbnRlbnQ6ICdMaW5rJ1xuXHRcdFx0XHQmOmhvdmVyXG5cdFx0XHRcdFx0YS5hbmNob3Jcblx0XHRcdFx0XHRcdHZpc2liaWxpdHk6IHZpc2libGVcblx0XHRcdFx0XHRcdFxuXHRcdFx0YmxvY2txdW90ZVxuXHRcdFx0XHRib3JkZXItbGVmdDogNXB4IHNvbGlkIHNlY29uZGFyeS1jb2xvclxuXHRcdFx0XHQvLyBjb2xvcjogI0ZGRlxuXHRcdFx0XHQvLyBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGVuKHRlcnRpYXJ5LWNvbG9yLCAxMClcblx0XHRcdFx0bWFyZ2luOiAwIDAgMjBweCAwXG5cdFx0XHRcdHBhZGRpbmc6IDEwcHggNDBweFxuXHRcdFx0XHRwXG5cdFx0XHRcdFx0Ly8gQGV4dGVuZHMgLmZvbnQtbWFpblxuXHRcdFx0XHRcdC8vIGZvbnQtd2VpZ2h0OiBsaWdodGVyXG5cdFx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMHB4XG5cdFx0XHRcdFx0Zm9udC1zdHlsZTogaXRhbGljXG5cdFx0XHRcdFxuXHRcdFx0LmFydGljbGUtLXNoYXJlXG5cdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlXG5cdFx0XHRcdHRvcDogMTBweFxuXHRcdFx0XHRyaWdodDogMTBweFxuXHRcdFx0XHRjb2xvcjogbGlnaHRlbihpbmstY29sb3IsIDUwKVxuXHRcdFx0XHRmb250LXdlaWdodDogbGlnaHRlclxuXHRcdFx0XHQmOmhvdmVyXG5cdFx0XHRcdFx0Y29sb3I6IGxpZ2h0ZW4oaW5rLWNvbG9yLCAyMClcblx0XHRcdFx0XHRjdXJzb3I6IHBvaW50ZXJcblxuIiwiaW1hZ2Utc2l6ZSA9IDE1ZW1cblxuLmNvbnRhY3RzXG5cdG1hcmdpbjogYXV0b1xuXHRkaXNwbGF5OiBmbGV4XG5cdGZsZXgtd3JhcDogd3JhcFxuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxuLmNvbnRhY3Rcblx0ZmxleDogMCAwIGF1dG9cblx0bWFyZ2luOmF1dG9cblx0ZGlzcGxheTogaW5saW5lLWJsb2NrXG5cdG1hcmdpbjogMmVtXG5cdGRpdlxuXHRcdG1hcmdpbjphdXRvXG5cdFx0d2lkdGg6IGltYWdlLXNpemVcblx0XHRoZWlnaHQ6IGltYWdlLXNpemVcblx0XHRib3JkZXItcmFkaXVzOiAoaW1hZ2Utc2l6ZS8yKVxuXHRcdGJhY2tncm91bmQtc2l6ZTogY292ZXJcblx0XHRiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXJcblx0YWRkcmVzc1xuXHRcdG1hcmdpbjogMWVtXG5cdFx0c3BhblxuXHRcdFx0ZGlzcGxheTpibG9ja1xuXHRcdFx0dGV4dC1hbGlnbjogY2VudGVyXG5cdFx0XHRmb250LXdlaWdodDogNDAwXG5cdFx0XHRwYWRkaW5nOiAycHhcblx0XHRcdGFcblx0XHRcdFx0cGFkZGluZzogMnB4Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9 */
