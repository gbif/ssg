.font-main {
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.font-article,
main section article p {
  font-family: 'Times New Roman', Times, serif;
}
div,
span,
h1,
h2,
h3,
p,
a,
i,
ol,
ul,
li,
fieldset,
form,
label,
input,
address,
section,
header {
  margin: 0px;
  padding: 0px;
  border: 0px;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  box-sizing: border-box;
}
ol,
ul {
  list-style: none;
}
html,
body {
  padding: 0;
  margin: 0;
  height: 100%;
}
body {
  color: #333;
  background: #f1f1f1;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 16px;
  overflow-x: hidden;
}
a {
  text-decoration: none;
  color: #333;
  border-bottom: 1px dotted #333;
}
a:hover {
  background-color: #ffa500;
  border: none;
}
.site-intro header {
  padding-left: 17em;
  position: fixed;
  width: 100%;
  top: 0px;
  height: 65px;
  z-index: 200;
  background-color: #7bc2d4;
  box-shadow: 0px 2px 1px 1px rgba(0,0,0,0.15);
}
.site-intro header h1 {
  color: #fff;
}
.site-intro header h1:before {
  content: 'LOGO';
  margin-right: 20px;
}
.search {
  display: none;
}
.login {
  display: none;
}
.share {
  display: none;
}
.brand {
  display: none;
  height: 130px;
  background: #333;
  text-align: center;
}
.brand span {
  line-height: 130px;
  color: #fff;
}
.navigation,
.site-intro .site-navigation,
.context-options {
  background: #fff;
  position: fixed;
  width: 17em;
  bottom: 0px;
  z-index: 50;
  overflow-x: auto;
  top: 65px;
}
.site-intro .site-navigation {
  z-index: 100;
  box-shadow: 1px 2px 1px 1px rgba(0,0,0,0.15);
  left: 0px;
}
.site-intro .site-navigation.toggle {
  background: #f00;
}
.context-options {
  right: 0px;
  right: -17em;
  box-shadow: -1px 1px 0.5px 1px rgba(0,0,0,0.15);
}
.context-options .share {
  position: absolute;
  float: right;
}
.navigation-main >ul>li>a:first-of-type {
  border-bottom: 1px solid #f2f2f2;
}
.navigation-main li {
  display: block;
  cursor: pointer;
}
.navigation-main li a {
  border-bottom: none;
  display: block;
  text-decoration: none;
  text-transform: capitalize;
  color: #333;
}
.navigation-main li a:hover {
  color: #000;
  background-color: #f2f2f2;
}
.navigation-main li.active >a {
  color: #000;
}
.navigation-main >ul>li >a {
  padding: 15px 20px;
}
.navigation-main >ul>li >ul >li.active >a {
  background-color: #f2f2f2;
}
.navigation-main >ul>li >ul >li >a {
  padding: 15px 20px;
}
.navigation-main >ul>li >ul >li >a:after {
  position: absolute;
  right: 10px;
}
.navigation-main >ul>li >ul >li >a.expandable:after {
  content: "+";
}
.navigation-main >ul>li >ul >li >ul {
  display: none;
}
.navigation-main >ul>li >ul >li >ul >li >a {
  padding: 7px 20px 7px 20px;
  color: #808080;
}
.navigation-main >ul>li >ul >li >ul >li >a:hover {
  background-color: inherit;
}
.navigation-main >ul>li >ul >li.active ul {
  display: block;
}
.navigation-main >ul>li >ul >li.active a.expandable:after {
  content: "-";
}
body.search-mode {
  overflow: hidden;
}
.morphsearch {
  width: 200px;
  min-height: 40px;
  background: #f1f1f1;
  z-index: 1000;
  top: 10px;
  position: fixed;
  right: 50px;
  -webkit-transform-origin: 100% 0;
  -webkit-transform-origin: 100% 0;
  transform-origin: 100% 0;
  transition-property: min-height, width, top, right;
  transition-duration: 0.5s;
  transition-timing-function: cubic-bezier(0.7, 0, 0.3, 1);
}
.morphsearch.open {
  width: 100%;
  min-height: 100%;
  top: 0px;
  right: 0px;
  overflow: auto;
}
.morphsearch-form {
  width: 100%;
  height: 40px;
  margin: 0 auto;
  position: relative;
  transition-property: width, height, -webkit-transform;
  transition-property: width, height, transform;
  transition-duration: 0.5s;
  transition-timing-function: cubic-bezier(0.7, 0, 0.3, 1);
}
.morphsearch.open .morphsearch-form {
  width: 80%;
  height: 160px;
  -webkit-transform: translate3d(0, 3em, 0);
  -webkit-transform: translate3d(0, 3em, 0);
  transform: translate3d(0, 3em, 0);
}
.morphsearch-input {
  width: 100%;
  height: 100%;
  padding: 0 10% 0 10px;
  font-weight: 700;
  border: none;
  background: transparent;
  font-size: 0.8em;
  color: #ec5a62;
  transition: font-size 0.5s cubic-bezier(0.7, 0, 0.3, 1);
}
.morphsearch-input::-ms-clear {
/* remove cross in IE */
  display: none;
}
.morphsearch.hideInput .morphsearch-input {
  color: transparent;
  transition: color 0.3s;
}
.morphsearch.open .morphsearch-input {
  font-size: 5em;
}
.morphsearch-input::-webkit-input-placeholder {
  color: #c2c2c2;
}
.morphsearch-input:-moz-placeholder {
  color: #c2c2c2;
}
.morphsearch-input::-moz-placeholder {
  color: #c2c2c2;
}
.morphsearch-input:-ms-input-placeholder {
  color: #c2c2c2;
}
.gn-search:focus::-webkit-input-placeholder {
  color: transparent;
}
input[type="search"] {
/* reset normalize */
  box-sizing: border-box;
}
.morphsearch-input:focus {
  outline: none;
}
.morphsearch-submit {
  display: none;
}
.morphsearch-submit {
  display: none;
}
.morphsearch-close {
  width: 36px;
  height: 36px;
  position: absolute;
  right: 1em;
  top: 1em;
  overflow: hidden;
  text-indent: 100%;
  cursor: pointer;
  pointer-events: none;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  opacity: 0;
  -webkit-transform: scale3d(0, 0, 1);
  -webkit-transform: scale3d(0, 0, 1);
  transform: scale3d(0, 0, 1);
}
.morphsearch.open .morphsearch-close {
  -ms-filter: none;
  -webkit-filter: none;
          filter: none;
  opacity: 1;
  pointer-events: auto;
  -webkit-transform: scale3d(1, 1, 1);
  -webkit-transform: scale3d(1, 1, 1);
  transform: scale3d(1, 1, 1);
  transition: opacity 0.3s, -webkit-transform 0.3s;
  transition: opacity 0.3s, transform 0.3s;
  transition-delay: 0.5s;
}
.morphsearch-close::before,
.morphsearch-close::after {
  content: '';
  position: absolute;
  width: 2px;
  height: 100%;
  top: 0;
  left: 50%;
  border-radius: 3px;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
  filter: alpha(opacity=20);
  opacity: 0.2;
  background: #000;
}
.morphsearch-close:hover.morphsearch-close::before,
.morphsearch-close:hover.morphsearch-close::after {
  -ms-filter: none;
  -webkit-filter: none;
          filter: none;
  opacity: 1;
}
.morphsearch-close::before {
  -webkit-transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
  transform: rotate(45deg);
}
.morphsearch-close::after {
  -webkit-transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
  transform: rotate(-45deg);
}
.morphsearch-content {
  color: #333;
  margin-top: 4.5em;
  width: 100%;
  height: 0;
  overflow: hidden;
  padding: 0 10.5%;
  background: #f1f1f1;
  position: absolute;
  pointer-events: none;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  opacity: 0;
}
.morphsearch.open .morphsearch-content {
  -ms-filter: none;
  -webkit-filter: none;
          filter: none;
  opacity: 1;
  height: auto;
  overflow: visible; /* this breaks the transition of the children in FF: https://bugzilla.mozilla.org/show_bug.cgi?id=625289 */
  pointer-events: auto;
  transition: opacity 0.3s 0.5s;
}
.dummy-column a {
  display: none;
}
.dummy-column a:focus,
.open .dummy-column a {
  display: block;
}
.dummy-column {
  width: 30%;
  padding: 0 0 6em;
  float: left;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  filter: alpha(opacity=0);
  opacity: 0;
  -webkit-transform: translate3d(0, 100px, 0);
  -webkit-transform: translateY(100px);
  transform: translateY(100px);
  transition: -webkit-transform 0.5s, opacity 0.5s;
  transition: transform 0.5s, opacity 0.5s;
}
.morphsearch.open .dummy-column {
  -ms-filter: none;
  -webkit-filter: none;
          filter: none;
  opacity: 1;
}
.dummy-column:nth-child(2) {
  margin: 0 5%;
}
.dummy-column h2 {
  font-size: 1em;
  letter-spacing: 1px;
  text-transform: uppercase;
  font-weight: 800;
  color: #c2c2c2;
  padding: 0.5em 0;
}
.round {
  border-radius: 50%;
}
.dummy-media-object {
  padding: 0.75em;
  display: block;
  margin: 0.3em 0;
  cursor: pointer;
  border-radius: 5px;
  background: rgba(118,117,128,0.05);
}
.dummy-media-object:hover,
.dummy-media-object:focus {
  background: rgba(118,117,128,0.1);
}
.dummy-media-object img {
  display: inline-block;
  width: 50px;
  margin: 0 10px 0 0;
  vertical-align: middle;
}
.dummy-media-object h3 {
  vertical-align: middle;
  font-size: 0.85em;
  display: inline-block;
  font-weight: 700;
  margin: 0 0 0 0;
  width: calc(30%);
  color: rgba(145,145,145,0.7);
}
.dummy-media-object:hover h3 {
  color: #ec5a62;
}
@media screen and (max-width: 53.125em) {
  .morphsearch-input {
    padding: 0 25% 0 10px;
  }
  .morphsearch.open .morphsearch-input {
    font-size: 2em;
  }
  .dummy-column {
    float: none;
    width: auto;
    padding: 0 0 2em;
  }
  .dummy-column:nth-child(2) {
    margin: 0;
  }
  .morphsearch.open .morphsearch-submit {
    -webkit-transform: translate3d(0, -50%, 0) scale3d(0.5, 0.5, 1);
    -webkit-transform: translate3d(0, -50%, 0) scale3d(0.5, 0.5, 1);
    transform: translate3d(0, -50%, 0) scale3d(0.5, 0.5, 1);
  }
}
@media screen and (max-width: 60.625em) {
  .morphsearch {
    width: 80%;
    top: 10%;
    right: 10%;
  }
}
.skip {
  position: fixed;
  left: 0;
  background: #333;
  color: #fff;
  padding: 10px 0;
  letter-spacing: 1px;
  line-height: 1.75em;
  text-align: center;
  text-transform: uppercase;
  top: -12.5em;
  transition: top 0.3s ease;
  width: 100%;
  z-index: 600;
  text-decoration: underline;
  outline: none;
  box-shadow: 0px 2px 1px 1px rgba(0,0,0,0.15);
}
.skip:hover {
  background: #333;
}
.skip:focus {
  top: 0;
}
main {
  padding-top: 65px;
  padding-left: 17em;
}
main section {
  padding: 50px;
}
main section .content {
  position: relative;
  background-color: #fff;
  box-shadow: 0px 1px 0.5px 1px rgba(0,0,0,0.15);
}
main section article {
  padding: 50px;
  color: #333;
  overflow-x: auto;
  max-width: 768px;
  margin: 0px auto;
}
main section article .contacts {
  margin: auto;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-justify-content: center;
  -ms-justify-content: center;
  -ms-flex-pack: center;
      justify-content: center;
}
main section article .contact {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  margin: auto;
  display: inline-block;
  margin: 2em;
}
main section article .contact div {
  margin: auto;
  width: 15em;
  height: 15em;
  border-radius: 7.5em;
  background-size: cover;
  background-position: center;
}
main section article .contact address {
  margin: 1em;
}
main section article .contact address span {
  display: block;
  text-align: center;
  font-weight: 400;
  padding: 2px;
}
main section article .contact address span a {
  padding: 2px;
}
main section article >p:first-of-type {
  margin-bottom: 2em;
  font-size: 1.4em;
  line-height: 1.3em;
  text-align: center;
}
main section article >p:first-of-type:after {
  display: block;
  border-bottom: 1px solid #e2c8ed;
  content: '';
  width: 50%;
  margin: 20px auto;
}
main section article p {
  font-size: 1.2em;
  line-height: 1.4em;
  margin-bottom: 2em;
  text-align: justify;
}
main section article h1 {
  font-size: 3.5em;
  margin-bottom: 0.3em;
  text-align: center;
  text-transform: uppercase;
  font-weight: bold;
  color: #4d4d4d;
}
main section article h2 {
  font-variant: small-caps;
  border-bottom: 1px dotted;
  margin-bottom: 1em;
}
main section article h2 a.anchor {
  visibility: hidden;
  width: 0px;
  padding-top: 65px;
  margin-top: -layout_header-height;
  margin-left: -45px;
  background: none;
  border: none;
}
main section article h2 a.anchor span {
  padding: 10px;
  width: 100px;
}
main section article h2 a.anchor span:after {
  width: 0px;
  content: 'Link';
}
main section article h2:hover a.anchor {
  visibility: visible;
}
main section article blockquote {
  border-left: 5px solid #95d47b;
  margin: 0 0 20px 0;
  padding: 10px 40px;
}
main section article blockquote p {
  margin-bottom: 0px;
  font-style: italic;
}
main section article .article--share {
  position: absolute;
  top: 10px;
  right: 10px;
  color: #b3b3b3;
  font-weight: lighter;
}
main section article .article--share:hover {
  color: #666;
  cursor: pointer;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhcmlhYmxlcy9jb3JlLnN0eWwiLCJpbmRleC5jc3MiLCJfcmVzZXQuc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvbWl4aW5zL3ZlbmRvcnMuc3R5bCIsImJhc2UvaW5kZXguc3R5bCIsIm5hdmlnYXRpb24vdmVydGljYWwvaGVhZGVyL2luZGV4LnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMva291dG8tc3dpc3MvbGliL2tvdXRvLXN3aXNzL3V0aWxpdGllcy9wb3NpdGlvbi5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9zZWFyY2gvaW5kZXguc3R5bCIsIi4uLy4uL25vZGVfbW9kdWxlcy9rb3V0by1zd2lzcy9saWIva291dG8tc3dpc3MvbWl4aW5zL3ZlbmRvcnMtZmxleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9sb2dpbi9pbmRleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9zaGFyZS9pbmRleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9icmFuZC9pbmRleC5zdHlsIiwibmF2aWdhdGlvbi92ZXJ0aWNhbC9uYXYvX2RyYXdlcnMuc3R5bCIsIm5hdmlnYXRpb24vdmVydGljYWwvbmF2L3ZlcnRpY2FsLW1lbnUuc3R5bCIsIm5hdmlnYXRpb24vc2VhcmNoL2luZGV4LnN0eWwiLCIuLi8uLi9ub2RlX21vZHVsZXMva291dG8tc3dpc3MvbGliL2tvdXRvLXN3aXNzL3V0aWxpdGllcy9vdmVyZmxvdy5zdHlsIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy9saWIvZnVuY3Rpb25zL2luZGV4LnN0eWwiLCJuYXZpZ2F0aW9uL19hMTF5LnN0eWwiLCJjb250ZW50LWFyZWEvaW5kZXguc3R5bCIsImFydGljbGUvX2FydGljbGUuc3R5bCIsImFydGljbGUvX2NvbnRhY3RzLnN0eWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUE7RUFDQyw0REFBQTtDQ0xBO0FET0Q7O0VBQ0Ms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bGUiOiJpbmRleC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBCUkVBSyBQT0lOVFMqL1xuLy8gbW9iaWxlIDogMHB4OyAvL21vYmlsZSBmaXJzdCwgbm8gc3VwcG9ydCBmb3Igd2VhcmFibGVzXG50YWJsZXQgPSA3NjhweFxubGFwdG9wID0gMTAyNHB4XG5kZXNrdG9wID0gMTIwMHB4XG5cbi5mb250LW1haW5cblx0Zm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWZcblxuLmZvbnQtYXJ0aWNsZVxuXHRmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZlxuIiwiLmZvbnQtbWFpbiB7XG4gIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xufVxuLmZvbnQtYXJ0aWNsZSxcbm1haW4gc2VjdGlvbiBhcnRpY2xlIHAge1xuICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcbn1cbmRpdixcbnNwYW4sXG5oMSxcbmgyLFxuaDMsXG5wLFxuYSxcbmksXG5vbCxcbnVsLFxubGksXG5maWVsZHNldCxcbmZvcm0sXG5sYWJlbCxcbmlucHV0LFxuYWRkcmVzcyxcbnNlY3Rpb24sXG5oZWFkZXIge1xuICBtYXJnaW46IDBweDtcbiAgcGFkZGluZzogMHB4O1xuICBib3JkZXI6IDBweDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxub2wsXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5odG1sLFxuYm9keSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuYm9keSB7XG4gIGNvbG9yOiAjMzMzO1xuICBiYWNrZ3JvdW5kOiAjZjFmMWYxO1xuICBmb250LWZhbWlseTogJ0hlbHZldGljYSBOZXVlJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5hIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogIzMzMztcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZCAjMzMzO1xufVxuYTpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmE1MDA7XG4gIGJvcmRlcjogbm9uZTtcbn1cbi5zaXRlLWludHJvIGhlYWRlciB7XG4gIHBhZGRpbmctbGVmdDogMTdlbTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB3aWR0aDogMTAwJTtcbiAgdG9wOiAwcHg7XG4gIGhlaWdodDogNjVweDtcbiAgei1pbmRleDogMjAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2JjMmQ0O1xuICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAycHggMXB4IDFweCByZ2JhKDAsMCwwLDAuMTUpO1xuICBib3gtc2hhZG93OiAwcHggMnB4IDFweCAxcHggcmdiYSgwLDAsMCwwLjE1KTtcbn1cbi5zaXRlLWludHJvIGhlYWRlciBoMSB7XG4gIGNvbG9yOiAjZmZmO1xufVxuLnNpdGUtaW50cm8gaGVhZGVyIGgxOmJlZm9yZSB7XG4gIGNvbnRlbnQ6ICdMT0dPJztcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xufVxuLnNlYXJjaCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubG9naW4ge1xuICBkaXNwbGF5OiBub25lO1xufVxuLnNoYXJlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5icmFuZCB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGhlaWdodDogMTMwcHg7XG4gIGJhY2tncm91bmQ6ICMzMzM7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5icmFuZCBzcGFuIHtcbiAgbGluZS1oZWlnaHQ6IDEzMHB4O1xuICBjb2xvcjogI2ZmZjtcbn1cbi5uYXZpZ2F0aW9uLFxuLnNpdGUtaW50cm8gLnNpdGUtbmF2aWdhdGlvbixcbi5jb250ZXh0LW9wdGlvbnMge1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHdpZHRoOiAxN2VtO1xuICBib3R0b206IDBweDtcbiAgei1pbmRleDogNTA7XG4gIG92ZXJmbG93LXg6IGF1dG87XG4gIHRvcDogNjVweDtcbn1cbi5zaXRlLWludHJvIC5zaXRlLW5hdmlnYXRpb24ge1xuICB6LWluZGV4OiAxMDA7XG4gIC13ZWJraXQtYm94LXNoYWRvdzogMXB4IDJweCAxcHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG4gIGJveC1zaGFkb3c6IDFweCAycHggMXB4IDFweCByZ2JhKDAsMCwwLDAuMTUpO1xuICBsZWZ0OiAwcHg7XG59XG4uc2l0ZS1pbnRybyAuc2l0ZS1uYXZpZ2F0aW9uLnRvZ2dsZSB7XG4gIGJhY2tncm91bmQ6ICNmMDA7XG59XG4uY29udGV4dC1vcHRpb25zIHtcbiAgcmlnaHQ6IDBweDtcbiAgcmlnaHQ6IC0xN2VtO1xuICAtd2Via2l0LWJveC1zaGFkb3c6IC0xcHggMXB4IDAuNXB4IDFweCByZ2JhKDAsMCwwLDAuMTUpO1xuICBib3gtc2hhZG93OiAtMXB4IDFweCAwLjVweCAxcHggcmdiYSgwLDAsMCwwLjE1KTtcbn1cbi5jb250ZXh0LW9wdGlvbnMgLnNoYXJlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBmbG9hdDogcmlnaHQ7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saT5hOmZpcnN0LW9mLXR5cGUge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2YyZjJmMjtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gbGkge1xuICBkaXNwbGF5OiBibG9jaztcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuLm5hdmlnYXRpb24tbWFpbiBsaSBhIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gIGNvbG9yOiAjMzMzO1xufVxuLm5hdmlnYXRpb24tbWFpbiBsaSBhOmhvdmVyIHtcbiAgY29sb3I6ICMwMDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XG59XG4ubmF2aWdhdGlvbi1tYWluIGxpLmFjdGl2ZSA+YSB7XG4gIGNvbG9yOiAjMDAwO1xufVxuLm5hdmlnYXRpb24tbWFpbiA+dWw+bGkgPmEge1xuICBwYWRkaW5nOiAxNXB4IDIwcHg7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+dWwgPmxpLmFjdGl2ZSA+YSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+dWwgPmxpID5hIHtcbiAgcGFkZGluZzogMTVweCAyMHB4O1xufVxuLm5hdmlnYXRpb24tbWFpbiA+dWw+bGkgPnVsID5saSA+YTphZnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDEwcHg7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+dWwgPmxpID5hLmV4cGFuZGFibGU6YWZ0ZXIge1xuICBjb250ZW50OiBcIitcIjtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkgPnVsIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkgPnVsID5saSA+YSB7XG4gIHBhZGRpbmc6IDdweCAyMHB4IDdweCAyMHB4O1xuICBjb2xvcjogIzgwODA4MDtcbn1cbi5uYXZpZ2F0aW9uLW1haW4gPnVsPmxpID51bCA+bGkgPnVsID5saSA+YTpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG59XG4ubmF2aWdhdGlvbi1tYWluID51bD5saSA+dWwgPmxpLmFjdGl2ZSB1bCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuLm5hdmlnYXRpb24tbWFpbiA+dWw+bGkgPnVsID5saS5hY3RpdmUgYS5leHBhbmRhYmxlOmFmdGVyIHtcbiAgY29udGVudDogXCItXCI7XG59XG5ib2R5LnNlYXJjaC1tb2RlIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi5tb3JwaHNlYXJjaCB7XG4gIHdpZHRoOiAyMDBweDtcbiAgbWluLWhlaWdodDogNDBweDtcbiAgYmFja2dyb3VuZDogI2YxZjFmMTtcbiAgei1pbmRleDogMTAwMDtcbiAgdG9wOiAxMHB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHJpZ2h0OiA1MHB4O1xuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XG4gIC1tcy10cmFuc2Zvcm0tb3JpZ2luOiAxMDAlIDA7XG4gIHRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OiBtaW4taGVpZ2h0LCB3aWR0aCwgdG9wLCByaWdodDtcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OiBtaW4taGVpZ2h0LCB3aWR0aCwgdG9wLCByaWdodDtcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogbWluLWhlaWdodCwgd2lkdGgsIHRvcCwgcmlnaHQ7XG4gIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC41cztcbiAgLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43LCAwLCAwLjMsIDEpO1xuICAtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43LCAwLCAwLjMsIDEpO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNywgMCwgMC4zLCAxKTtcbn1cbi5tb3JwaHNlYXJjaC5vcGVuIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG4gIHRvcDogMHB4O1xuICByaWdodDogMHB4O1xuICBvdmVyZmxvdzogYXV0bztcbn1cbi5tb3JwaHNlYXJjaC1mb3JtIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OiB3aWR0aCwgaGVpZ2h0LCAtd2Via2l0LXRyYW5zZm9ybTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OiB3aWR0aCwgaGVpZ2h0LCB0cmFuc2Zvcm07XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IHdpZHRoLCBoZWlnaHQsIHRyYW5zZm9ybTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDAuNXM7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDAuNXM7XG4gIC13ZWJraXQtdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjcsIDAsIDAuMywgMSk7XG4gIC13ZWJraXQtdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjcsIDAsIDAuMywgMSk7XG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43LCAwLCAwLjMsIDEpO1xufVxuLm1vcnBoc2VhcmNoLm9wZW4gLm1vcnBoc2VhcmNoLWZvcm0ge1xuICB3aWR0aDogODAlO1xuICBoZWlnaHQ6IDE2MHB4O1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgM2VtLCAwKTtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDNlbSwgMCk7XG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDNlbSwgMCk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgM2VtLCAwKTtcbn1cbi5tb3JwaHNlYXJjaC1pbnB1dCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHBhZGRpbmc6IDAgMTAlIDAgMTBweDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgZm9udC1zaXplOiAwLjhlbTtcbiAgY29sb3I6ICNlYzVhNjI7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogZm9udC1zaXplIDAuNXMgY3ViaWMtYmV6aWVyKDAuNywgMCwgMC4zLCAxKTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBmb250LXNpemUgMC41cyBjdWJpYy1iZXppZXIoMC43LCAwLCAwLjMsIDEpO1xuICB0cmFuc2l0aW9uOiBmb250LXNpemUgMC41cyBjdWJpYy1iZXppZXIoMC43LCAwLCAwLjMsIDEpO1xufVxuLm1vcnBoc2VhcmNoLWlucHV0OjotbXMtY2xlYXIge1xuLyogcmVtb3ZlIGNyb3NzIGluIElFICovXG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubW9ycGhzZWFyY2guaGlkZUlucHV0IC5tb3JwaHNlYXJjaC1pbnB1dCB7XG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBjb2xvciAwLjNzO1xuICAtd2Via2l0LXRyYW5zaXRpb246IGNvbG9yIDAuM3M7XG4gIHRyYW5zaXRpb246IGNvbG9yIDAuM3M7XG59XG4ubW9ycGhzZWFyY2gub3BlbiAubW9ycGhzZWFyY2gtaW5wdXQge1xuICBmb250LXNpemU6IDVlbTtcbn1cbi5tb3JwaHNlYXJjaC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzJjMmMyO1xufVxuLm1vcnBoc2VhcmNoLWlucHV0Oi1tb3otcGxhY2Vob2xkZXIge1xuICBjb2xvcjogI2MyYzJjMjtcbn1cbi5tb3JwaHNlYXJjaC1pbnB1dDo6LW1vei1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzJjMmMyO1xufVxuLm1vcnBoc2VhcmNoLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzJjMmMyO1xufVxuLmduLXNlYXJjaDpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl0ge1xuLyogcmVzZXQgbm9ybWFsaXplICovXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG4ubW9ycGhzZWFyY2gtaW5wdXQ6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lO1xufVxuLm1vcnBoc2VhcmNoLXN1Ym1pdCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4ubW9ycGhzZWFyY2gtc3VibWl0IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5tb3JwaHNlYXJjaC1jbG9zZSB7XG4gIHdpZHRoOiAzNnB4O1xuICBoZWlnaHQ6IDM2cHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDFlbTtcbiAgdG9wOiAxZW07XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtaW5kZW50OiAxMDAlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAtbXMtZmlsdGVyOiBcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTApXCI7XG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0wKTtcbiAgb3BhY2l0eTogMDtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMCwgMCwgMSk7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZTNkKDAsIDAsIDEpO1xuICAtbXMtdHJhbnNmb3JtOiBzY2FsZTNkKDAsIDAsIDEpO1xuICB0cmFuc2Zvcm06IHNjYWxlM2QoMCwgMCwgMSk7XG59XG4ubW9ycGhzZWFyY2gub3BlbiAubW9ycGhzZWFyY2gtY2xvc2Uge1xuICAtbXMtZmlsdGVyOiBub25lO1xuICBmaWx0ZXI6IG5vbmU7XG4gIG9wYWNpdHk6IDE7XG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XG4gIC1tcy10cmFuc2Zvcm06IHNjYWxlM2QoMSwgMSwgMSk7XG4gIHRyYW5zZm9ybTogc2NhbGUzZCgxLCAxLCAxKTtcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MsIC13ZWJraXQtdHJhbnNmb3JtIDAuM3M7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCB0cmFuc2Zvcm0gMC4zcztcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCB0cmFuc2Zvcm0gMC4zcztcbiAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xuICAtd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XG4gIHRyYW5zaXRpb24tZGVsYXk6IDAuNXM7XG59XG4ubW9ycGhzZWFyY2gtY2xvc2U6OmJlZm9yZSxcbi5tb3JwaHNlYXJjaC1jbG9zZTo6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMnB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHRvcDogMDtcbiAgbGVmdDogNTAlO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIC1tcy1maWx0ZXI6IFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MjApXCI7XG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0yMCk7XG4gIG9wYWNpdHk6IDAuMjtcbiAgYmFja2dyb3VuZDogIzAwMDtcbn1cbi5tb3JwaHNlYXJjaC1jbG9zZTpob3Zlci5tb3JwaHNlYXJjaC1jbG9zZTo6YmVmb3JlLFxuLm1vcnBoc2VhcmNoLWNsb3NlOmhvdmVyLm1vcnBoc2VhcmNoLWNsb3NlOjphZnRlciB7XG4gIC1tcy1maWx0ZXI6IG5vbmU7XG4gIGZpbHRlcjogbm9uZTtcbiAgb3BhY2l0eTogMTtcbn1cbi5tb3JwaHNlYXJjaC1jbG9zZTo6YmVmb3JlIHtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG59XG4ubW9ycGhzZWFyY2gtY2xvc2U6OmFmdGVyIHtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG4gIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xufVxuLm1vcnBoc2VhcmNoLWNvbnRlbnQge1xuICBjb2xvcjogIzMzMztcbiAgbWFyZ2luLXRvcDogNC41ZW07XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmc6IDAgMTAuNSU7XG4gIGJhY2tncm91bmQ6ICNmMWYxZjE7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIC1tcy1maWx0ZXI6IFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MClcIjtcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTApO1xuICBvcGFjaXR5OiAwO1xufVxuLm1vcnBoc2VhcmNoLm9wZW4gLm1vcnBoc2VhcmNoLWNvbnRlbnQge1xuICAtbXMtZmlsdGVyOiBub25lO1xuICBmaWx0ZXI6IG5vbmU7XG4gIG9wYWNpdHk6IDE7XG4gIGhlaWdodDogYXV0bztcbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIHRoaXMgYnJlYWtzIHRoZSB0cmFuc2l0aW9uIG9mIHRoZSBjaGlsZHJlbiBpbiBGRjogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjI1Mjg5ICovXG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyAwLjVzO1xuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyAwLjVzO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgMC41cztcbn1cbi5kdW1teS1jb2x1bW4gYSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4uZHVtbXktY29sdW1uIGE6Zm9jdXMsXG4ub3BlbiAuZHVtbXktY29sdW1uIGEge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbi5kdW1teS1jb2x1bW4ge1xuICB3aWR0aDogMzAlO1xuICBwYWRkaW5nOiAwIDAgNmVtO1xuICBmbG9hdDogbGVmdDtcbiAgLW1zLWZpbHRlcjogXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0wKVwiO1xuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7XG4gIG9wYWNpdHk6IDA7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAxMDBweCwgMCk7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwMHB4KTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDBweCk7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDBweCk7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC41cywgb3BhY2l0eSAwLjVzO1xuICAtd2Via2l0LXRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzLCBvcGFjaXR5IDAuNXM7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzLCBvcGFjaXR5IDAuNXM7XG59XG4ubW9ycGhzZWFyY2gub3BlbiAuZHVtbXktY29sdW1uIHtcbiAgLW1zLWZpbHRlcjogbm9uZTtcbiAgZmlsdGVyOiBub25lO1xuICBvcGFjaXR5OiAxO1xufVxuLmR1bW15LWNvbHVtbjpudGgtY2hpbGQoMikge1xuICBtYXJnaW46IDAgNSU7XG59XG4uZHVtbXktY29sdW1uIGgyIHtcbiAgZm9udC1zaXplOiAxZW07XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA4MDA7XG4gIGNvbG9yOiAjYzJjMmMyO1xuICBwYWRkaW5nOiAwLjVlbSAwO1xufVxuLnJvdW5kIHtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xufVxuLmR1bW15LW1lZGlhLW9iamVjdCB7XG4gIHBhZGRpbmc6IDAuNzVlbTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMC4zZW0gMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGJhY2tncm91bmQ6IHJnYmEoMTE4LDExNywxMjgsMC4wNSk7XG59XG4uZHVtbXktbWVkaWEtb2JqZWN0OmhvdmVyLFxuLmR1bW15LW1lZGlhLW9iamVjdDpmb2N1cyB7XG4gIGJhY2tncm91bmQ6IHJnYmEoMTE4LDExNywxMjgsMC4xKTtcbn1cbi5kdW1teS1tZWRpYS1vYmplY3QgaW1nIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogNTBweDtcbiAgbWFyZ2luOiAwIDEwcHggMCAwO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuLmR1bW15LW1lZGlhLW9iamVjdCBoMyB7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGZvbnQtc2l6ZTogMC44NWVtO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIG1hcmdpbjogMCAwIDAgMDtcbiAgd2lkdGg6IC13ZWJraXQtY2FsYygzMCUpO1xuICB3aWR0aDogY2FsYygzMCUpO1xuICBjb2xvcjogcmdiYSgxNDUsMTQ1LDE0NSwwLjcpO1xufVxuLmR1bW15LW1lZGlhLW9iamVjdDpob3ZlciBoMyB7XG4gIGNvbG9yOiAjZWM1YTYyO1xufVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTMuMTI1ZW0pIHtcbiAgLm1vcnBoc2VhcmNoLWlucHV0IHtcbiAgICBwYWRkaW5nOiAwIDI1JSAwIDEwcHg7XG4gIH1cbiAgLm1vcnBoc2VhcmNoLm9wZW4gLm1vcnBoc2VhcmNoLWlucHV0IHtcbiAgICBmb250LXNpemU6IDJlbTtcbiAgfVxuICAuZHVtbXktY29sdW1uIHtcbiAgICBmbG9hdDogbm9uZTtcbiAgICB3aWR0aDogYXV0bztcbiAgICBwYWRkaW5nOiAwIDAgMmVtO1xuICB9XG4gIC5kdW1teS1jb2x1bW46bnRoLWNoaWxkKDIpIHtcbiAgICBtYXJnaW46IDA7XG4gIH1cbiAgLm1vcnBoc2VhcmNoLm9wZW4gLm1vcnBoc2VhcmNoLXN1Ym1pdCB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC01MCUsIDApIHNjYWxlM2QoMC41LCAwLjUsIDEpO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNTAlLCAwKSBzY2FsZTNkKDAuNSwgMC41LCAxKTtcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAtNTAlLCAwKSBzY2FsZTNkKDAuNSwgMC41LCAxKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC01MCUsIDApIHNjYWxlM2QoMC41LCAwLjUsIDEpO1xuICB9XG59XG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MC42MjVlbSkge1xuICAubW9ycGhzZWFyY2gge1xuICAgIHdpZHRoOiA4MCU7XG4gICAgdG9wOiAxMCU7XG4gICAgcmlnaHQ6IDEwJTtcbiAgfVxufVxuLnNraXAge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGxlZnQ6IDA7XG4gIGJhY2tncm91bmQ6ICMzMzM7XG4gIGNvbG9yOiAjZmZmO1xuICBwYWRkaW5nOiAxMHB4IDA7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjc1ZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgdG9wOiAtMTIuNWVtO1xuICAtd2Via2l0LXRyYW5zaXRpb246IHRvcCAwLjNzIGVhc2U7XG4gIHRyYW5zaXRpb246IHRvcCAwLjNzIGVhc2U7XG4gIHdpZHRoOiAxMDAlO1xuICB6LWluZGV4OiA2MDA7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICBvdXRsaW5lOiBub25lO1xuICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAycHggMXB4IDFweCByZ2JhKDAsMCwwLDAuMTUpO1xuICBib3gtc2hhZG93OiAwcHggMnB4IDFweCAxcHggcmdiYSgwLDAsMCwwLjE1KTtcbn1cbi5za2lwOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cbi5za2lwOmZvY3VzIHtcbiAgdG9wOiAwO1xufVxubWFpbiB7XG4gIHBhZGRpbmctdG9wOiA2NXB4O1xuICBwYWRkaW5nLWxlZnQ6IDE3ZW07XG59XG5tYWluIHNlY3Rpb24ge1xuICBwYWRkaW5nOiA1MHB4O1xufVxubWFpbiBzZWN0aW9uIC5jb250ZW50IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAxcHggMC41cHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG4gIGJveC1zaGFkb3c6IDBweCAxcHggMC41cHggMXB4IHJnYmEoMCwwLDAsMC4xNSk7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSB7XG4gIHBhZGRpbmc6IDUwcHg7XG4gIGNvbG9yOiAjMzMzO1xuICBvdmVyZmxvdy14OiBhdXRvO1xuICBtYXgtd2lkdGg6IDc2OHB4O1xuICBtYXJnaW46IDBweCBhdXRvO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3RzIHtcbiAgbWFyZ2luOiBhdXRvO1xuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgZGlzcGxheTogZmxleDtcbiAgLXdlYmtpdC1mbGV4LXdyYXA6IHdyYXA7XG4gIC1tcy1mbGV4LXdyYXA6IHdyYXA7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgLW1zLWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIC5jb250YWN0IHtcbiAgLXdlYmtpdC1mbGV4OiAwIDAgYXV0bztcbiAgLW1zLWZsZXg6IDAgMCBhdXRvO1xuICBmbGV4OiAwIDAgYXV0bztcbiAgbWFyZ2luOiBhdXRvO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMmVtO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgZGl2IHtcbiAgbWFyZ2luOiBhdXRvO1xuICB3aWR0aDogMTVlbTtcbiAgaGVpZ2h0OiAxNWVtO1xuICBib3JkZXItcmFkaXVzOiA3LjVlbTtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgYWRkcmVzcyB7XG4gIG1hcmdpbjogMWVtO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgYWRkcmVzcyBzcGFuIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgcGFkZGluZzogMnB4O1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmNvbnRhY3QgYWRkcmVzcyBzcGFuIGEge1xuICBwYWRkaW5nOiAycHg7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSA+cDpmaXJzdC1vZi10eXBlIHtcbiAgbWFyZ2luLWJvdHRvbTogMmVtO1xuICBmb250LXNpemU6IDEuNGVtO1xuICBsaW5lLWhlaWdodDogMS4zZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlID5wOmZpcnN0LW9mLXR5cGU6YWZ0ZXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMmM4ZWQ7XG4gIGNvbnRlbnQ6ICcnO1xuICB3aWR0aDogNTAlO1xuICBtYXJnaW46IDIwcHggYXV0bztcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIHAge1xuICBmb250LXNpemU6IDEuMmVtO1xuICBsaW5lLWhlaWdodDogMS40ZW07XG4gIG1hcmdpbi1ib3R0b206IDJlbTtcbiAgdGV4dC1hbGlnbjoganVzdGlmeTtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIGgxIHtcbiAgZm9udC1zaXplOiAzLjVlbTtcbiAgbWFyZ2luLWJvdHRvbTogMC4zZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGNvbG9yOiAjNGQ0ZDRkO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgaDIge1xuICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7XG4gIG1hcmdpbi1ib3R0b206IDFlbTtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIGgyIGEuYW5jaG9yIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICB3aWR0aDogMHB4O1xuICBwYWRkaW5nLXRvcDogNjVweDtcbiAgbWFyZ2luLXRvcDogLWxheW91dF9oZWFkZXItaGVpZ2h0O1xuICBtYXJnaW4tbGVmdDogLTQ1cHg7XG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogbm9uZTtcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIGgyIGEuYW5jaG9yIHNwYW4ge1xuICBwYWRkaW5nOiAxMHB4O1xuICB3aWR0aDogMTAwcHg7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSBoMiBhLmFuY2hvciBzcGFuOmFmdGVyIHtcbiAgd2lkdGg6IDBweDtcbiAgY29udGVudDogJ0xpbmsnO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgaDI6aG92ZXIgYS5hbmNob3Ige1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgYmxvY2txdW90ZSB7XG4gIGJvcmRlci1sZWZ0OiA1cHggc29saWQgIzk1ZDQ3YjtcbiAgbWFyZ2luOiAwIDAgMjBweCAwO1xuICBwYWRkaW5nOiAxMHB4IDQwcHg7XG59XG5tYWluIHNlY3Rpb24gYXJ0aWNsZSBibG9ja3F1b3RlIHAge1xuICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cbm1haW4gc2VjdGlvbiBhcnRpY2xlIC5hcnRpY2xlLS1zaGFyZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxMHB4O1xuICByaWdodDogMTBweDtcbiAgY29sb3I6ICNiM2IzYjM7XG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyO1xufVxubWFpbiBzZWN0aW9uIGFydGljbGUgLmFydGljbGUtLXNoYXJlOmhvdmVyIHtcbiAgY29sb3I6ICM2NjY7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cbiIsIlxuXG4vKlJlc2V0IFN0eWxlcyovXG4vKlxuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLCBoNCwgaDUsIGg2LGJsb2NrcXVvdGUsIHByZSxhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLGNlbnRlcixsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcbmFydGljbGUsIGFzaWRlLCBtZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbywgYnV0dG9uLGRsLCBkdCwgZGQsIG9sLGIsIHUsIGZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcbiovXG5kaXYsIHNwYW4sIGgxLCBoMiwgaDMsIHAsIGEsIGksIG9sLCB1bCwgbGksIGZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgaW5wdXQsIGFkZHJlc3MsIHNlY3Rpb24sIGhlYWRlclxuICAgIG1hcmdpbjogMHB4XG4gICAgcGFkZGluZzogMHB4XG4gICAgYm9yZGVyOiAwcHhcbiAgICBmb250LXNpemU6IDEwMCVcbiAgICBmb250OiBpbmhlcml0XG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveFxuXG5vbCwgdWxcbiAgICBsaXN0LXN0eWxlOiBub25lXG5cbmh0bWwsIGJvZHlcbiAgICBwYWRkaW5nOiAwXG4gICAgbWFyZ2luOiAwXG4gICAgaGVpZ2h0OiAxMDAlXG5cbmJvZHlcbiAgICBjb2xvcjogaW5rLWNvbG9yXG4gICAgYmFja2dyb3VuZDogYmFja2dyb3VuZC1jb2xvclxuICAgIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhIE5ldWUnLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXG4gICAgZm9udC1zaXplOiAxNnB4XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuXG5cblxuIiwia3MtdmVuZG9ycy1wcmVmaXhlcyA9IHJlY29tbWVuZGVkXG5cbmtzLXZlbmRvciggcHJvcGVydHksIHZhbHVlLCBmZWF0dXJlID0gbnVsbCwgcHJlZml4ZXMgPSBudWxsLCBvZmZpY2lhbCA9IHRydWUgKVxuICAgIHVubGVzcyBcInZlbmRvclwiIGluIGNhbGxlZC1mcm9tXG4gICAgICAgIGlmIGZlYXR1cmUgaXNudCBudWxsIGFuZCAhKCBmZWF0dXJlIGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzIClcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggZmVhdHVyZSApXG4gICAgICAgICAgICAgICAgcHJlZml4ZWRwcm9wZXJ0eSA9IFwiLVwiICsgcHJlZml4ICsgXCItXCIgKyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIHtwcmVmaXhlZHByb3BlcnR5fTogdmFsdWVcbiAgICAgICAgZWxzZSBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2VcbiAgICAgICAgICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgcmVjb21tZW5kZWRcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ZXMgPSBrcy12ZW5kb3JzLXByZWZpeGVzXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4ZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBwcmVmaXhlc1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ZWRwcm9wZXJ0eSA9IFwiLVwiICsgcHJlZml4ICsgXCItXCIgKyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAge3ByZWZpeGVkcHJvcGVydHl9OiB2YWx1ZVxuICAgIGlmIG9mZmljaWFsXG4gICAgICAgIHtwcm9wZXJ0eX06IHZhbHVlXG5cbnZlbmRvciA9IGtzLXZlbmRvciB1bmxlc3Mga3Mtbm8tY29uZmxpY3RcblxudW5sZXNzIGtzLW5vLWNvbmZsaWN0XG4gICAgYW5pbWF0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24tZGVsYXkoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWRlbGF5XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi1kaXJlY3Rpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWRpcmVjdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24tZHVyYXRpb24oKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLWZpbGwtbW9kZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWFuaW1hdGlvblwiIClcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50KClcbiAgICAgICAga3MtdmVuZG9yKCBcImFuaW1hdGlvbi1pdGVyYXRpb24tY291bnRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLW5hbWUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLW5hbWVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLXBsYXktc3RhdGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYW5pbWF0aW9uLXBsYXktc3RhdGVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1hbmltYXRpb25cIiApXG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtYW5pbWF0aW9uXCIgKVxuXG4gICAgYXBwZWFyYW5jZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJhcHBlYXJhbmNlXCIsIGFyZ3VtZW50cywgcHJlZml4ZXM6IHdlYmtpdCBtb3ogKVxuXG4gICAgYmFja2ZhY2UtdmlzaWJpbGl0eSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJiYWNrZmFjZS12aXNpYmlsaXR5XCIsIGFyZ3VtZW50cywgcHJlZml4ZXM6IHdlYmtpdCBtcyApXG5cbiAgICBiYWNrZ3JvdW5kLWNsaXAoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYmFja2dyb3VuZC1jbGlwXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJiYWNrZ3JvdW5kLWltZy1vcHRzXCIgKVxuICAgIGJhY2tncm91bmQtb3JpZ2luKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJhY2tncm91bmQtb3JpZ2luXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJiYWNrZ3JvdW5kLWltZy1vcHRzXCIgKVxuICAgIGJhY2tncm91bmQtc2l6ZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJiYWNrZ3JvdW5kLXNpemVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJhY2tncm91bmQtaW1nLW9wdHNcIiApXG5cbiAgICBib3JkZXItaW1hZ2Utc291cmNlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS1zb3VyY2VcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcbiAgICBib3JkZXItaW1hZ2Utc2xpY2UoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm9yZGVyLWltYWdlLXNsaWNlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJib3JkZXItaW1hZ2VcIiApXG4gICAgYm9yZGVyLWltYWdlLXdpZHRoKClcbiAgICAgICAga3MtdmVuZG9yKCBcImJvcmRlci1pbWFnZS13aWR0aFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYm9yZGVyLWltYWdlXCIgKVxuICAgIGJvcmRlci1pbWFnZS1vdXRzZXQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm9yZGVyLWltYWdlLW91dHNldFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYm9yZGVyLWltYWdlXCIgKVxuICAgIGJvcmRlci1pbWFnZS1yZXBlYXQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm9yZGVyLWltYWdlLXJlcGVhdFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiYm9yZGVyLWltYWdlXCIgKVxuICAgIGJvcmRlci1pbWFnZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJib3JkZXItaW1hZ2VcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImJvcmRlci1pbWFnZVwiIClcblxuICAgIGJveC1zaGFkb3coKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm94LXNoYWRvd1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWJveHNoYWRvd1wiIClcblxuICAgIGJveC1zaXppbmcoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiYm94LXNpemluZ1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzMy1ib3hzaXppbmdcIiApXG5cbiAgICBjbGlwLXBhdGgoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY2xpcC1wYXRoXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtY2xpcC1wYXRoXCIgKVxuXG4gICAgY29sdW1uLWNvdW50KClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1jb3VudFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLWZpbGwoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLWZpbGxcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1nYXAoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLWdhcFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLXJ1bGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLXJ1bGVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1ydWxlLWNvbG9yKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1ydWxlLWNvbG9yXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiIClcbiAgICBjb2x1bW4tcnVsZS1zdHlsZSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4tcnVsZS1zdHlsZVwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG4gICAgY29sdW1uLXJ1bGUtd2lkdGgoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uLXJ1bGUtd2lkdGhcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbi1zcGFuKClcbiAgICAgICAga3MtdmVuZG9yKCBcImNvbHVtbi1zcGFuXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJtdWx0aWNvbHVtblwiKVxuICAgIGNvbHVtbi13aWR0aCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJjb2x1bW4td2lkdGhcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcIm11bHRpY29sdW1uXCIgKVxuICAgIGNvbHVtbnMoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiY29sdW1uc1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwibXVsdGljb2x1bW5cIiApXG5cbiAgICBncmlkKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtYXJlYSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWFyZWFcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtYXV0by1jb2x1bW5zKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtYXV0by1jb2x1bW5zXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWF1dG8tZmxvdygpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWF1dG8tZmxvd1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1hdXRvLXBvc2l0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtYXV0by1wb3NpdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1hdXRvLXJvd3MoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1hdXRvLXJvd3NcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtY29sdW1uKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtY29sdW1uXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWNvbHVtbi1lbmQoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1jb2x1bW4tZW5kXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLWNvbHVtbi1zdGFydCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLWNvbHVtbi1zdGFydFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC1yb3coKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC1yb3dcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtcm93LWVuZCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJncmlkLXJvdy1lbmRcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtcm93LXN0YXJ0KClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtcm93LXN0YXJ0XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJjc3MtZ3JpZFwiIClcbiAgICBncmlkLXRlbXBsYXRlKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtdGVtcGxhdGVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1ncmlkXCIgKVxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXMoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZ3JpZC10ZW1wbGF0ZS1hcmVhc1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtdGVtcGxhdGUtY29sdW1uc1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzKClcbiAgICAgICAga3MtdmVuZG9yKCBcImdyaWQtdGVtcGxhdGUtcm93c1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLWdyaWRcIiApXG5cbiAgICBoeXBoZW5zKClcbiAgICAgICAga3MtdmVuZG9yKCBcImh5cGhlbnNcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy1oeXBoZW5zXCIgKVxuXG4gICAganVzdGlmeS1jb250ZW50KClcbiAgICAgICAga3MtdmVuZG9yKCBcImp1c3RpZnktY29udGVudFwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiZmxleGJveFwiIClcblxuICAgIG1hc2soKVxuICAgICAgICBrcy12ZW5kb3IoIFwibWFza1wiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLW1hc2tzXCIgKVxuXG4gICAgb3BhY2l0eSggdmFsdWUgKVxuICAgICAgICBpZiB2YWx1ZSA9PSBpbmhlcml0IG9yIHZhbHVlID09IGluaXRpYWxcbiAgICAgICAgICAgIC1tcy1maWx0ZXIgdmFsdWVcbiAgICAgICAgICAgIGZpbHRlciB2YWx1ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB2YWwgPSByb3VuZCggdmFsdWUgKiAxMDAgKVxuICAgICAgICAgICAgaWYgdmFsID09IDEwMFxuICAgICAgICAgICAgICAgIC1tcy1maWx0ZXI6IG5vbmVcbiAgICAgICAgICAgICAgICBmaWx0ZXI6IG5vbmVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAtbXMtZmlsdGVyOiAnXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0lcylcIicgJSB2YWxcbiAgICAgICAgICAgICAgICBmaWx0ZXI6ICdhbHBoYShvcGFjaXR5PSVzKScgJSB2YWxcbiAgICAgICAgb3BhY2l0eTogdmFsdWVcblxuICAgIG9yZGVyKClcbiAgICAgICAga3MtdmVuZG9yKCBcIm9yZGVyXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgcGVyc3BlY3RpdmUoKVxuICAgICAgICBpZiBjdXJyZW50LXByb3BlcnR5WyAwIF0gaXMgXCJwZXJzcGVjdGl2ZVwiXG4gICAgICAgICAgICBrcy12ZW5kb3IoIFwicGVyc3BlY3RpdmVcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcInRyYW5zZm9ybXMzZFwiIClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdW5xdW90ZSggXCJwZXJzcGVjdGl2ZShcIiArIGFyZ3VtZW50cyArIFwiKVwiIClcblxuICAgIHBlcnNwZWN0aXZlLW9yaWdpbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJwZXJzcGVjdGl2ZS1vcmlnaW5cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcInRyYW5zZm9ybXMzZFwiIClcblxuICAgIHRyYW5zZm9ybSgpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2Zvcm1cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcInRyYW5zZm9ybXMyZFwiIClcbiAgICB0cmFuc2Zvcm0tb3JpZ2luKClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zZm9ybS1vcmlnaW5cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcInRyYW5zZm9ybXMyZFwiIClcbiAgICB0cmFuc2Zvcm0tc3R5bGUoKVxuICAgICAgICBrcy12ZW5kb3IoIFwidHJhbnNmb3JtLXN0eWxlXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ0cmFuc2Zvcm1zM2RcIiApXG5cbiAgICB0cmFuc2l0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zaXRpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy10cmFuc2l0aW9uc1wiIClcbiAgICB0cmFuc2l0aW9uLWRlbGF5KClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zaXRpb24tZGVsYXlcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy10cmFuc2l0aW9uc1wiIClcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uKClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy10cmFuc2l0aW9uc1wiIClcbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5KClcbiAgICAgICAga3MtdmVuZG9yKCBcInRyYW5zaXRpb24tcHJvcGVydHlcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImNzcy10cmFuc2l0aW9uc1wiIClcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbigpXG4gICAgICAgIGtzLXZlbmRvciggXCJ0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiLCBhcmd1bWVudHMsIGZlYXR1cmU6IFwiY3NzLXRyYW5zaXRpb25zXCIgKVxuXG4gICAgdXNlci1zZWxlY3QoIHZhbHVlIClcbiAgICAgICAga3MtdmVuZG9yKCBcInVzZXItc2VsZWN0XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJ1c2VyLXNlbGVjdC1ub25lXCIgKVxuIiwiQGltcG9ydCBcIl92YXJzXCJcblxuYVxuXHR0ZXh0LWRlY29yYXRpb246IG5vbmVcblx0Y29sb3I6IGluay1jb2xvclxuXHRib3JkZXItYm90dG9tOiAxcHggZG90dGVkIGluay1jb2xvclxuXHQmOmhvdmVyXG5cdFx0YmFja2dyb3VuZC1jb2xvcjogbGluay1iZy1jb2xvclxuXHRcdGJvcmRlcjogbm9uZSIsIi5zaXRlLWludHJvXG5cdGhlYWRlclxuXHRcdHBhZGRpbmctbGVmdDogbGF5b3V0X2RyYXdlci13aWR0aFxuXHRcdHBvc2l0aW9uOmZpeGVkXG5cdFx0d2lkdGg6IDEwMCVcblx0XHR0b3A6MHB4XG5cdFx0aGVpZ2h0OiBsYXlvdXRfaGVhZGVyLWhlaWdodFxuXHRcdHotaW5kZXg6IDIwMFxuXHRcdGJhY2tncm91bmQtY29sb3I6IHByaW1hcnktY29sb3Jcblx0XHRfc2hhZG93KDIpXG5cdFx0XG5cdFx0aDFcblx0XHRcdGNvbG9yOiBwcmltYXJ5LWluay1jb2xvclxuXHRcdFx0JjpiZWZvcmVcblx0XHRcdFx0Y29udGVudDogJ0xPR08nXG5cdFx0XHRcdG1hcmdpbi1yaWdodDogMjBweCIsImtzLXBvc2l0aW9uKCBwb3MsIHZhbHVlcyApXG4gICAgaWYgbGFzdCggdmFsdWVzICkgPT0gXCIhaW1wb3J0YW50XCJcbiAgICAgICAgX3ZvaWQgPSBwb3AoIHZhbHVlcyApXG4gICAgICAgIGltcG9ydGFudCA9IFwiIWltcG9ydGFudFwiXG4gICAgZWxzZVxuICAgICAgICBpbXBvcnRhbnQgPSBcIlwiXG4gICAgaWYgcG9zID09IHN0aWNreVxuICAgICAgICBpZiAhKCBcImNzcy1zdGlja3lcIiBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBmb3IgcHJlZml4IGluIGNhbml1c2UtcHJlZml4ZXMoIFwiY3NzLXN0aWNreVwiIClcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogdW5xdW90ZSggXCItXCIgKyBwcmVmaXggKyBcIi1zdGlja3kgXCIgKyBpbXBvcnRhbnQgKVxuICAgICAgICBlbHNlIGlmIGtzLXZlbmRvcnMtcHJlZml4ZXMgaXNudCBmYWxzZVxuICAgICAgICAgICAgICAgIGlmIGtzLXZlbmRvcnMtcHJlZml4ZXMgaXNudCByZWNvbW1lbmRlZFxuICAgICAgICAgICAgICAgICAgICBwcmVmaXhlcyA9IGtzLXZlbmRvcnMtcHJlZml4ZXNcbiAgICAgICAgICAgICAgICBpZiBwcmVmaXhlc1xuICAgICAgICAgICAgICAgICAgICBmb3IgcHJlZml4IGluIHByZWZpeGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogdW5xdW90ZSggXCItXCIgKyBwcmVmaXggKyBcIi1zdGlja3kgXCIgKyBpbXBvcnRhbnQgKVxuICAgICAgICBwb3NpdGlvbjogdW5xdW90ZSggXCJzdGlja3kgXCIgKyBpbXBvcnRhbnQgKVxuICAgIGVsc2VcbiAgICAgICAgcG9zaXRpb246IHBvcyB1bnF1b3RlKCBpbXBvcnRhbnQgKVxuICAgIGlmIGxlbmd0aCggdmFsdWVzICkgPT0gMSAmJiB2YWx1ZXNbIDAgXSAhPSBmYWxzZVxuICAgICAgICB0b3A6IHZhbHVlc1sgMCBdIHVucXVvdGUoIGltcG9ydGFudCApXG4gICAgICAgIHJpZ2h0OiB2YWx1ZXNbIDAgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKVxuICAgICAgICBib3R0b206IHZhbHVlc1sgMCBdIHVucXVvdGUoIGltcG9ydGFudCApXG4gICAgICAgIGxlZnQ6IHZhbHVlc1sgMCBdIHVucXVvdGUoIGltcG9ydGFudCApXG4gICAgaWYgbGVuZ3RoKCB2YWx1ZXMgKSA9PSAyXG4gICAgICAgIHRvcDogdmFsdWVzWyAwIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAwIF0gIT0gZmFsc2VcbiAgICAgICAgcmlnaHQ6IHZhbHVlc1sgMSBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMSBdICE9IGZhbHNlXG4gICAgICAgIGJvdHRvbTogdmFsdWVzWyAwIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAwIF0gIT0gZmFsc2VcbiAgICAgICAgbGVmdDogdmFsdWVzWyAxIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAxIF0gIT0gZmFsc2VcbiAgICBpZiBsZW5ndGgoIHZhbHVlcyApID09IDNcbiAgICAgICAgdG9wOiB2YWx1ZXNbIDAgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDAgXSAhPSBmYWxzZVxuICAgICAgICByaWdodDogdmFsdWVzWyAxIF0gdW5xdW90ZSggaW1wb3J0YW50ICkgaWYgdmFsdWVzWyAxIF0gIT0gZmFsc2VcbiAgICAgICAgYm90dG9tOiB2YWx1ZXNbIDIgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDIgXSAhPSBmYWxzZVxuICAgICAgICBsZWZ0OiB2YWx1ZXNbIDEgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDEgXSAhPSBmYWxzZVxuICAgIGlmIGxlbmd0aCggdmFsdWVzICkgPT0gNFxuICAgICAgICB0b3A6IHZhbHVlc1sgMCBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMCBdICE9IGZhbHNlXG4gICAgICAgIHJpZ2h0OiB2YWx1ZXNbIDEgXSB1bnF1b3RlKCBpbXBvcnRhbnQgKSBpZiB2YWx1ZXNbIDEgXSAhPSBmYWxzZVxuICAgICAgICBib3R0b206IHZhbHVlc1sgMiBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMiBdICE9IGZhbHNlXG4gICAgICAgIGxlZnQ6IHZhbHVlc1sgMyBdIHVucXVvdGUoIGltcG9ydGFudCApIGlmIHZhbHVlc1sgMyBdICE9IGZhbHNlXG5cbmtzLXN0YXRpYyggdmFsdWVzLi4uIClcbiAgICBrcy1wb3NpdGlvbiggc3RhdGljLCB2YWx1ZXMgKVxuXG5rcy1yZWxhdGl2ZSggdmFsdWVzLi4uIClcbiAgICBrcy1wb3NpdGlvbiggcmVsYXRpdmUsIHZhbHVlcyApXG5cbmtzLWFic29sdXRlKCB2YWx1ZXMuLi4gKVxuICAgIGtzLXBvc2l0aW9uKCBhYnNvbHV0ZSwgdmFsdWVzIClcblxua3MtZml4ZWQoIHZhbHVlcy4uLiApXG4gICAga3MtcG9zaXRpb24oIGZpeGVkLCB2YWx1ZXMgKVxuXG5rcy1zdGlja3koIHZhbHVlcy4uLiApXG4gICAga3MtcG9zaXRpb24oIHN0aWNreSwgdmFsdWVzIClcblxudW5sZXNzIGtzLW5vLWNvbmZsaWN0XG4gICAgc3RhdGljKCB2YWx1ZXMuLi4gKVxuICAgICAgICBrcy1wb3NpdGlvbiggc3RhdGljLCB2YWx1ZXMgKVxuXG4gICAgcmVsYXRpdmUoIHZhbHVlcy4uLiApXG4gICAgICAgIGtzLXBvc2l0aW9uKCByZWxhdGl2ZSwgdmFsdWVzIClcblxuICAgIGFic29sdXRlKCB2YWx1ZXMuLi4gKVxuICAgICAgICBrcy1wb3NpdGlvbiggYWJzb2x1dGUsIHZhbHVlcyApXG5cbiAgICBmaXhlZCggdmFsdWVzLi4uIClcbiAgICAgICAga3MtcG9zaXRpb24oIGZpeGVkLCB2YWx1ZXMgKVxuXG4gICAgc3RpY2t5KCB2YWx1ZXMuLi4gKVxuICAgICAgICBrcy1wb3NpdGlvbiggc3RpY2t5LCB2YWx1ZXMgKVxuXG4gICAgcG9zaXRpb24oIHZhbHVlLCB2YWx1ZXMuLi4gKVxuICAgICAgICBrcy1wb3NpdGlvbiggdmFsdWUsIHZhbHVlcyApXG4iLCIuc2VhcmNoXG5cdGRpc3BsYXk6IG5vbmUiLCJfa3Mtc3VwcG9ydC1vbGQtZmxleC1pbXBsZW1lbnRhdGlvbigpXG4gICAgcmV0dXJuIGtzLXN1cHBvcnQtc2FmYXJpIDw9IDYgb3Iga3Mtc3VwcG9ydC1hbmRyb2lkLWJyb3dzZXIgPD0gNC4zIG9yIGtzLXN1cHBvcnQtY2hyb21lIDw9IDIwIG9yIGtzLXN1cHBvcnQtaW9zLXNhZmFyaSA8PSA2LjEgb3Iga3Mtc3VwcG9ydC1ibGFja2JlcnJ5LWJyb3dzZXIgPD0gN1xuXG5rcy1kaXNwbGF5KCB2YWx1ZSwgYXJncy4uLiApXG4gICAgaWYgdmFsdWUgPT0gZmxleFxuICAgICAgICBpZiBrcy12ZW5kb3JzLXByZWZpeGVzIGlzbnQgZmFsc2UgYW5kICEoIGZsZXggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKSBhbmQgISggZmxleGJveCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApXG4gICAgICAgICAgICBpZiBfa3Mtc3VwcG9ydC1vbGQtZmxleC1pbXBsZW1lbnRhdGlvbigpXG4gICAgICAgICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1ib3ggYXJnc1xuICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBjYW5pdXNlLXByZWZpeGVzKCBcImZsZXhib3hcIiApXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4IGlzIFwid2Via2l0XCJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1mbGV4IGFyZ3NcbiAgICAgICAgICAgICAgICBpZiBwcmVmaXggaXMgXCJtb3pcIlxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAtbW96LWJveCBhcmdzXG4gICAgICAgICAgICAgICAgaWYgcHJlZml4IGlzIFwibXNcIlxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAtbXMtZmxleGJveCBhcmdzXG4gICAgICAgIGRpc3BsYXk6IGZsZXggYXJnc1xuICAgIGVsc2UgaWYgdmFsdWUgPT0gaW5saW5lLWZsZXhcbiAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlIGFuZCAhKCBmbGV4IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzICkgYW5kICEoIGZsZXhib3ggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgZm9yIHByZWZpeCBpbiBjYW5pdXNlLXByZWZpeGVzKCBcImZsZXhib3hcIiApXG4gICAgICAgICAgICAgICAgZGlzcGxheTogdW5xdW90ZSggXCItXCIgKyBwcmVmaXggKyBcIi1pbmxpbmUtZmxleFwiICkgYXJnc1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCBhcmdzXG4gICAgZWxzZVxuICAgICAgICBkaXNwbGF5OiB2YWx1ZSBhcmdzXG5cbmRpc3BsYXkgPSBrcy1kaXNwbGF5IHVubGVzcyBrcy1uby1jb25mbGljdFxuXG51bmxlc3Mga3Mtbm8tY29uZmxpY3RcbiAgICBmbGV4LWdyb3coKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZmxleC1ncm93XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgZmxleC1iYXNpcygpXG4gICAgICAgIGtzLXZlbmRvciggXCJmbGV4LWJhc2lzXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgZmxleC1kaXJlY3Rpb24oIHZhbHVlLCBhcmdzLi4uIClcbiAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlIGFuZCAhKCBmbGV4IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzICkgYW5kICEoIGZsZXhib3ggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgaWYgX2tzLXN1cHBvcnQtb2xkLWZsZXgtaW1wbGVtZW50YXRpb24oKVxuICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHJvd1xuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWwgYXJnc1xuICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIHJvdy1yZXZlcnNlXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IHJldmVyc2UgYXJnc1xuICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIGNvbHVtblxuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbCBhcmdzXG4gICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgY29sdW1uLXJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiByZXZlcnNlIGFyZ3NcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggXCJmbGV4Ym94XCIgKVxuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIm1velwiIGFuZCBrcy1zdXBwb3J0LWZpcmVmb3ggPD0gMjBcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgcm93XG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1vcmllbnQ6IHZlcnRpY2FsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWRpcmVjdGlvbjogbm9ybWFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgcm93LXJldmVyc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LW9yaWVudDogdmVydGljYWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtZGlyZWN0aW9uOiByZXZlcnNlIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAtbW96LWJveC1vcmllbnQ6IGhvcml6b250YWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtZGlyZWN0aW9uOiBub3JtYWwgYXJnc1xuICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyBjb2x1bW4tcmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtb3JpZW50OiBob3Jpem9udGFsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWRpcmVjdGlvbjogcmV2ZXJzZSBhcmdzXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZSBpcyByb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC17cHJlZml4fS1mbGV4LWRpcmVjdGlvbjogdW5xdW90ZSggXCJyb3dcIiApIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiB2YWx1ZSBpcyBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC17cHJlZml4fS1mbGV4LWRpcmVjdGlvbjogdW5xdW90ZSggXCJjb2x1bW5cIiApIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLXtwcmVmaXh9LWZsZXgtZGlyZWN0aW9uOiB2YWx1ZSBhcmdzXG4gICAgICAgIGlmIHZhbHVlIGlzIHJvd1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHVucXVvdGUoIFwicm93XCIgKSBhcmdzXG4gICAgICAgIGVsc2UgaWYgdmFsdWUgaXMgY29sdW1uXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogdW5xdW90ZSggXCJjb2x1bW5cIiApIGFyZ3NcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHZhbHVlIGFyZ3NcblxuICAgIGZsZXgtZmxvdyggZGlyLCB3cmFwLXR5cGUsIGFyZ3MuLi4gKVxuICAgICAgICBpZiBkaXIgaXMgcm93XG4gICAgICAgICAgICBkaXIgPSB1bnF1b3RlKCBcInJvd1wiIClcbiAgICAgICAgaWYgZGlyIGlzIGNvbHVtblxuICAgICAgICAgICAgZGlyID0gdW5xdW90ZSggXCJjb2x1bW5cIiApXG4gICAgICAgIGlmIGtzLXZlbmRvcnMtcHJlZml4ZXMgaXNudCBmYWxzZSBhbmQgISggZmxleCBpbiBrcy1zdXBwb3J0LWlnbm9yZS1mZWF0dXJlcyApIGFuZCAhKCBmbGV4Ym94IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzIClcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggXCJmbGV4Ym94XCIgKVxuICAgICAgICAgICAgICAgIC17cHJlZml4fS1mbGV4LWZsb3c6IGRpciB3cmFwLXR5cGUgYXJnc1xuICAgICAgICBmbGV4LWZsb3c6IGRpciB3cmFwLXR5cGUgYXJnc1xuXG4gICAgZmxleC1zaHJpbmsoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZmxleC1zaHJpbmtcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG5cbiAgICBmbGV4LXdyYXAoKVxuICAgICAgICBrcy12ZW5kb3IoIFwiZmxleC13cmFwXCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgZmxleCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJmbGV4XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgYWxpZ24tY29udGVudCgpXG4gICAgICAgIGtzLXZlbmRvciggXCJhbGlnbi1jb250ZW50XCIsIGFyZ3VtZW50cywgZmVhdHVyZTogXCJmbGV4Ym94XCIgKVxuXG4gICAgYWxpZ24taXRlbXMoIHZhbHVlLCBhcmdzLi4uIClcbiAgICAgICAgaWYga3MtdmVuZG9ycy1wcmVmaXhlcyBpc250IGZhbHNlIGFuZCAhKCBmbGV4IGluIGtzLXN1cHBvcnQtaWdub3JlLWZlYXR1cmVzICkgYW5kICEoIGZsZXhib3ggaW4ga3Mtc3VwcG9ydC1pZ25vcmUtZmVhdHVyZXMgKVxuICAgICAgICAgICAgaWYgX2tzLXN1cHBvcnQtb2xkLWZsZXgtaW1wbGVtZW50YXRpb24oKVxuICAgICAgICAgICAgICAgIGlmIHZhbHVlIGlzIGZsZXgtc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0IGFyZ3NcbiAgICAgICAgICAgICAgICBlbHNlIGlmIHZhbHVlIGlzIGZsZXgtZW5kXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtYm94LWFsaWduOiBlbmQgYXJnc1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtYWxpZ246IHZhbHVlIGFyZ3NcbiAgICAgICAgICAgIGZvciBwcmVmaXggaW4gY2FuaXVzZS1wcmVmaXhlcyggXCJmbGV4Ym94XCIgKVxuICAgICAgICAgICAgICAgIGlmIHByZWZpeCBpcyBcIm1velwiIGFuZCBrcy1zdXBwb3J0LWZpcmVmb3ggPD0gMjBcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWUgaXMgZmxleC1zdGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtYWxpZ246IHN0YXJ0IGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiB2YWx1ZSBpcyBmbGV4LWVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgLW1vei1ib3gtYWxpZ246IGVuZCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tb3otYm94LWFsaWduOiB2YWx1ZSBhcmdzXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAte3ByZWZpeH0tYWxpZ24taXRlbXM6IHZhbHVlIGFyZ3NcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiB2YWx1ZSBhcmdzXG5cbiAgICBhbGlnbi1zZWxmKClcbiAgICAgICAga3MtdmVuZG9yKCBcImFsaWduLXNlbGZcIiwgYXJndW1lbnRzLCBmZWF0dXJlOiBcImZsZXhib3hcIiApXG4iLCIubG9naW5cblx0ZGlzcGxheTogbm9uZSIsIi5zaGFyZVxuXHRkaXNwbGF5OiBub25lIiwiLmJyYW5kXG5cdGRpc3BsYXk6IG5vbmUgLy9UT0RPXG5cdGhlaWdodDogMioobGF5b3V0X2hlYWRlci1oZWlnaHQpXG5cdGJhY2tncm91bmQ6IGluay1jb2xvclxuXHR0ZXh0LWFsaWduOiBjZW50ZXJcblx0c3BhblxuXHRcdGxpbmUtaGVpZ2h0OiAyKihsYXlvdXRfaGVhZGVyLWhlaWdodClcblx0XHRjb2xvcjogd2hpdGUiLCIubmF2aWdhdGlvblxuXHRiYWNrZ3JvdW5kOiBwYXBlci1jb2xvclxuXHRwb3NpdGlvbjogZml4ZWRcblx0d2lkdGg6IGxheW91dF9kcmF3ZXItd2lkdGhcblx0Ym90dG9tOiAwcHhcblx0ei1pbmRleDogNTBcblx0b3ZlcmZsb3cteDogYXV0b1xuXHR0b3A6IGxheW91dF9oZWFkZXItaGVpZ2h0XG5cdFx0XG4uc2l0ZS1pbnRyb1xuXHQuc2l0ZS1uYXZpZ2F0aW9uXG5cdFx0QGV4dGVuZHMgLm5hdmlnYXRpb25cblx0XHR6LWluZGV4OiAxMDBcblx0XHQvLyB0b3A6IDBweFxuXHRcdF9zaGFkb3coMiwxKVxuXHRcdGxlZnQ6IDBweC8vLShsYXlvdXRfZHJhd2VyLXdpZHRoKVxuXHRcdCYudG9nZ2xlXG5cdFx0XHRiYWNrZ3JvdW5kOiByZWRcblx0XHRcbi5jb250ZXh0LW9wdGlvbnNcblx0QGV4dGVuZHMgLm5hdmlnYXRpb25cblx0cmlnaHQ6IDBweFxuXHRyaWdodDogLShsYXlvdXRfZHJhd2VyLXdpZHRoKVxuXHRfc2hhZG93KDEsLTEpXG5cdC5zaGFyZVxuXHRcdHBvc2l0aW9uOmFic29sdXRlO1xuXHRcdGZsb2F0OnJpZ2h0XG4iLCIubmF2aWdhdGlvbi1tYWluXG5cdD51bD5saT5hOmZpcnN0LW9mLXR5cGVcblx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgZGFya2VuKHBhcGVyLWNvbG9yLCA1KVxuXHRsaVxuXHRcdGRpc3BsYXk6IGJsb2NrXG5cdFx0Y3Vyc29yOiBwb2ludGVyXG5cdFx0YVxuXHRcdFx0Ym9yZGVyLWJvdHRvbTogbm9uZVxuXHRcdFx0ZGlzcGxheTpibG9ja1xuXHRcdFx0dGV4dC1kZWNvcmF0aW9uOiBub25lXG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZVxuXHRcdFx0Y29sb3I6IGluay1jb2xvclxuXHRcdFx0Jjpob3ZlclxuXHRcdFx0XHRjb2xvcjogZGFya2VuKGluay1jb2xvciwgMjApXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6IGRhcmtlbihwYXBlci1jb2xvciwgNSlcblx0XHQmLmFjdGl2ZVxuXHRcdFx0PmFcblx0XHRcdFx0Y29sb3I6IGRhcmtlbihpbmstY29sb3IsIDIwKVxuXHQ+dWw+bGlcblx0XHQ+YVxuXHRcdFx0cGFkZGluZzogMTVweCAyMHB4XG5cdFx0PnVsXG5cdFx0XHQ+bGlcblx0XHRcdFx0Ji5hY3RpdmVcblx0XHRcdFx0XHQ+YVxuXHRcdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogZGFya2VuKHBhcGVyLWNvbG9yLCA1KVxuXHRcdFx0XHQ+YVxuXHRcdFx0XHRcdHBhZGRpbmc6IDE1cHggMjBweFxuXHRcdFx0XHRcdCY6YWZ0ZXJcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZVxuXHRcdFx0XHRcdFx0cmlnaHQ6IDEwcHhcblx0XHRcdFx0XHQmLmV4cGFuZGFibGU6YWZ0ZXJcblx0XHRcdFx0XHRcdGNvbnRlbnQ6IFwiK1wiXG5cdFx0XHRcdD51bFxuXHRcdFx0XHRcdGRpc3BsYXk6IG5vbmVcblx0XHRcdFx0XHQ+bGlcblx0XHRcdFx0XHRcdD5hXG5cdFx0XHRcdFx0XHRcdHBhZGRpbmc6IDdweCAyMHB4IDdweCAyMHB4XG5cdFx0XHRcdFx0XHRcdGNvbG9yOiBsaWdodGVuKGluay1jb2xvciwgMzApXG5cdFx0XHRcdFx0XHRcdCY6aG92ZXJcblx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0XG5cdFx0XHRcdCYuYWN0aXZlXG5cdFx0XHRcdFx0dWxcblx0XHRcdFx0XHRcdGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdFx0YS5leHBhbmRhYmxlOmFmdGVyXG5cdFx0XHRcdFx0XHRjb250ZW50OiBcIi1cIiIsIi8qIFxuU2VlOiBodHRwczovL2dpdGh1Yi5jb20vY29kcm9wcy9Nb3JwaGluZ1NlYXJjaFxuTGljZW5jZTog4omIIGZyZWUgdG8gdXNlIHdpdGhvdXQgYXR0cmlidXRpb24gZm9yIGFsbCBwdXJwb3Nlc1xuKi9cbmJvZHkuc2VhcmNoLW1vZGV7XG5cdG92ZXJmbG93OmhpZGRlbjtcbn1cbi5tb3JwaHNlYXJjaCB7XG5cdHdpZHRoOiAyMDBweDtcblx0bWluLWhlaWdodDogNDBweDtcblx0YmFja2dyb3VuZDogI2YxZjFmMTtcblx0ei1pbmRleDogMTAwMDtcblx0dG9wOiAxMHB4O1xuXHRwb3NpdGlvbjogZml4ZWQ7XG5cdHJpZ2h0OiA1MHB4O1xuXHQtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDEwMCUgMDtcblx0dHJhbnNmb3JtLW9yaWdpbjogMTAwJSAwO1xuXHQtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IG1pbi1oZWlnaHQsIHdpZHRoLCB0b3AsIHJpZ2h0O1xuXHR0cmFuc2l0aW9uLXByb3BlcnR5OiBtaW4taGVpZ2h0LCB3aWR0aCwgdG9wLCByaWdodDtcblx0LXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuXHR0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuXHQtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43LDAsMC4zLDEpO1xuXHR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNywwLDAuMywxKTtcbn1cblxuLm1vcnBoc2VhcmNoLm9wZW4ge1xuXHR3aWR0aDogMTAwJTtcblx0bWluLWhlaWdodDogMTAwJTtcblx0dG9wOiAwcHg7XG5cdHJpZ2h0OiAwcHg7XG5cdG92ZXJmbG93OiBhdXRvO1xufVxuXG4ubW9ycGhzZWFyY2gtZm9ybSB7XG5cdHdpZHRoOiAxMDAlO1xuXHRoZWlnaHQ6IDQwcHg7XG5cdG1hcmdpbjogMCBhdXRvO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdC13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTogd2lkdGgsIGhlaWdodCwgLXdlYmtpdC10cmFuc2Zvcm07XG5cdHRyYW5zaXRpb24tcHJvcGVydHk6IHdpZHRoLCBoZWlnaHQsIHRyYW5zZm9ybTtcblx0LXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuXHR0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuXHQtd2Via2l0LXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC43LDAsMC4zLDEpO1xuXHR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNywwLDAuMywxKTtcbn1cblxuLm1vcnBoc2VhcmNoLm9wZW4gLm1vcnBoc2VhcmNoLWZvcm0ge1xuXHR3aWR0aDogODAlO1xuXHRoZWlnaHQ6IDE2MHB4O1xuXHQtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwzZW0sMCk7XG5cdHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwzZW0sMCk7XG59XG5cbi5tb3JwaHNlYXJjaC1pbnB1dCB7XG5cdHdpZHRoOiAxMDAlO1xuXHRoZWlnaHQ6IDEwMCU7XG5cdHBhZGRpbmc6IDAgMTAlIDAgMTBweDtcblx0Zm9udC13ZWlnaHQ6IDcwMDtcblx0Ym9yZGVyOiBub25lO1xuXHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0Zm9udC1zaXplOiAwLjhlbTtcblx0Y29sb3I6ICNlYzVhNjI7XG5cdC13ZWJraXQtdHJhbnNpdGlvbjogZm9udC1zaXplIDAuNXMgY3ViaWMtYmV6aWVyKDAuNywwLDAuMywxKTtcblx0dHJhbnNpdGlvbjogZm9udC1zaXplIDAuNXMgY3ViaWMtYmV6aWVyKDAuNywwLDAuMywxKTtcbn1cblxuLm1vcnBoc2VhcmNoLWlucHV0OjotbXMtY2xlYXIgeyAvKiByZW1vdmUgY3Jvc3MgaW4gSUUgKi9cbiAgICBkaXNwbGF5OiBub25lO1xufVxuXG4ubW9ycGhzZWFyY2guaGlkZUlucHV0IC5tb3JwaHNlYXJjaC1pbnB1dCB7XG5cdGNvbG9yOiB0cmFuc3BhcmVudDtcblx0LXdlYmtpdC10cmFuc2l0aW9uOiBjb2xvciAwLjNzO1xuXHR0cmFuc2l0aW9uOiBjb2xvciAwLjNzO1xufVxuXG4ubW9ycGhzZWFyY2gub3BlbiAubW9ycGhzZWFyY2gtaW5wdXQge1xuXHRmb250LXNpemU6IDVlbTtcbn1cblxuLyogcGxhY2Vob2xkZXIgKi9cbi5tb3JwaHNlYXJjaC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdGNvbG9yOiAjYzJjMmMyO1xufVxuXG4ubW9ycGhzZWFyY2gtaW5wdXQ6LW1vei1wbGFjZWhvbGRlciB7XG5cdGNvbG9yOiAjYzJjMmMyO1xufVxuXG4ubW9ycGhzZWFyY2gtaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXIge1xuXHRjb2xvcjogI2MyYzJjMjtcbn1cblxuLm1vcnBoc2VhcmNoLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdGNvbG9yOiAjYzJjMmMyO1xufVxuXG4vKiBoaWRlIHBsYWNlaG9sZGVyIHdoZW4gYWN0aXZlIGluIENocm9tZSAqL1xuLmduLXNlYXJjaDpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdGNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7IC8qIHJlc2V0IG5vcm1hbGl6ZSAqL1xuXHQtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7IFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1x0XG59XG5cbi8vLm1vcnBoc2VhcmNoLXN1Ym1pdDpmb2N1cywgXG4ubW9ycGhzZWFyY2gtaW5wdXQ6Zm9jdXMge1xuXHRvdXRsaW5lOiBub25lO1xufVxuXG4vKioqKiogU2luY2Ugd2UgY3VycmVudGx5IHVzZSBjbGllbnQgc2lkZSBzZWFyY2gganVzdCBoaWRlIHN1Ym1pdCAqKioqKioqL1xuLm1vcnBoc2VhcmNoLXN1Ym1pdCB7XG5cdGRpc3BsYXk6IG5vbmU7XG59XG5cbi5tb3JwaHNlYXJjaC1zdWJtaXQge1xuXHRkaXNwbGF5OiBub25lO1xufVxuXG4ubW9ycGhzZWFyY2gtY2xvc2Uge1xuXHR3aWR0aDogMzZweDtcblx0aGVpZ2h0OiAzNnB4O1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHJpZ2h0OiAxZW07XG5cdHRvcDogMWVtO1xuXHRvdmVyZmxvdzogaGlkZGVuO1xuXHR0ZXh0LWluZGVudDogMTAwJTtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0b3BhY2l0eTogMDtcblx0LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMCwwLDEpO1xuXHR0cmFuc2Zvcm06IHNjYWxlM2QoMCwwLDEpO1xufVxuXG4ubW9ycGhzZWFyY2gub3BlbiAubW9ycGhzZWFyY2gtY2xvc2Uge1xuXHRvcGFjaXR5OiAxO1xuXHRwb2ludGVyLWV2ZW50czogYXV0bztcblx0LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlM2QoMSwxLDEpO1xuXHR0cmFuc2Zvcm06IHNjYWxlM2QoMSwxLDEpO1xuXHQtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4zcywgLXdlYmtpdC10cmFuc2Zvcm0gMC4zcztcblx0dHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCB0cmFuc2Zvcm0gMC4zcztcblx0LXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xuXHR0cmFuc2l0aW9uLWRlbGF5OiAwLjVzO1xufVxuXG4ubW9ycGhzZWFyY2gtY2xvc2U6OmJlZm9yZSxcbi5tb3JwaHNlYXJjaC1jbG9zZTo6YWZ0ZXIge1xuXHRjb250ZW50OiAnJztcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR3aWR0aDogMnB4O1xuXHRoZWlnaHQ6IDEwMCU7XG5cdHRvcDogMDtcblx0bGVmdDogNTAlO1xuXHRib3JkZXItcmFkaXVzOiAzcHg7XG5cdG9wYWNpdHk6IDAuMjtcblx0YmFja2dyb3VuZDogIzAwMDtcbn1cblxuLm1vcnBoc2VhcmNoLWNsb3NlOmhvdmVyLm1vcnBoc2VhcmNoLWNsb3NlOjpiZWZvcmUsXG4ubW9ycGhzZWFyY2gtY2xvc2U6aG92ZXIubW9ycGhzZWFyY2gtY2xvc2U6OmFmdGVyIHtcblx0b3BhY2l0eTogMTtcbn1cblxuLm1vcnBoc2VhcmNoLWNsb3NlOjpiZWZvcmUge1xuXHQtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcblx0dHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xufVxuXG4ubW9ycGhzZWFyY2gtY2xvc2U6OmFmdGVyIHtcblx0LXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuXHR0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xufVxuXG4ubW9ycGhzZWFyY2gtY29udGVudCB7XG5cdGNvbG9yOiAjMzMzO1xuXHRtYXJnaW4tdG9wOiA0LjVlbTtcblx0d2lkdGg6IDEwMCU7XG5cdGhlaWdodDogMDtcblx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0cGFkZGluZzogMCAxMC41JTtcblx0YmFja2dyb3VuZDogI2YxZjFmMTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0b3BhY2l0eTogMDtcbn1cblxuLm1vcnBoc2VhcmNoLm9wZW4gLm1vcnBoc2VhcmNoLWNvbnRlbnQge1xuXHRvcGFjaXR5OiAxO1xuXHRoZWlnaHQ6IGF1dG87XG5cdG92ZXJmbG93OiB2aXNpYmxlOyAvKiB0aGlzIGJyZWFrcyB0aGUgdHJhbnNpdGlvbiBvZiB0aGUgY2hpbGRyZW4gaW4gRkY6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OSAqL1xuXHRwb2ludGVyLWV2ZW50czogYXV0bztcblx0LXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgMC41cztcblx0dHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIDAuNXM7XG59XG5cbi5kdW1teS1jb2x1bW4gYXtcblx0ZGlzcGxheTogbm9uZTtcbn1cbi5kdW1teS1jb2x1bW4gYTpmb2N1cywgLm9wZW4gLmR1bW15LWNvbHVtbiBhe1xuXHRkaXNwbGF5OiBibG9jaztcbn1cdFxuXG4uZHVtbXktY29sdW1uIHtcblx0d2lkdGg6IDMwJTtcblx0cGFkZGluZzogMCAwIDZlbTtcblx0ZmxvYXQ6IGxlZnQ7XG5cdG9wYWNpdHk6IDA7XG5cdC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLDEwMHB4LDApO1xuXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTAwcHgpO1xuXHQtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuNXMsIG9wYWNpdHkgMC41cztcblx0dHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXMsIG9wYWNpdHkgMC41cztcbn1cblxuLm1vcnBoc2VhcmNoLm9wZW4gLmR1bW15LWNvbHVtbiB7XG5cdG9wYWNpdHk6IDE7XG59XG5cbi5kdW1teS1jb2x1bW46bnRoLWNoaWxkKDIpIHtcblx0bWFyZ2luOiAwIDUlO1xufVxuXG4uZHVtbXktY29sdW1uIGgyIHtcblx0Zm9udC1zaXplOiAxZW07XG5cdGxldHRlci1zcGFjaW5nOiAxcHg7XG5cdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdGZvbnQtd2VpZ2h0OiA4MDA7XG5cdGNvbG9yOiAjYzJjMmMyO1xuXHRwYWRkaW5nOiAwLjVlbSAwO1xufVxuXG4ucm91bmQge1xuXHRib3JkZXItcmFkaXVzOiA1MCU7XG59XG5cbi5kdW1teS1tZWRpYS1vYmplY3Qge1xuXHRwYWRkaW5nOiAwLjc1ZW07XG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRtYXJnaW46IDAuM2VtIDA7XG5cdGN1cnNvcjogcG9pbnRlcjtcblx0Ym9yZGVyLXJhZGl1czogNXB4O1xuXHRiYWNrZ3JvdW5kOiByZ2JhKDExOCwxMTcsMTI4LDAuMDUpO1xufVxuXG4uZHVtbXktbWVkaWEtb2JqZWN0OmhvdmVyLFxuLmR1bW15LW1lZGlhLW9iamVjdDpmb2N1cyB7XG5cdGJhY2tncm91bmQ6IHJnYmEoMTE4LDExNywxMjgsMC4xKTtcbn1cblxuLmR1bW15LW1lZGlhLW9iamVjdCBpbWcge1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdHdpZHRoOiA1MHB4O1x0XG5cdG1hcmdpbjogMCAxMHB4IDAgMDtcblx0dmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLmR1bW15LW1lZGlhLW9iamVjdCBoMyB7XG5cdHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG5cdGZvbnQtc2l6ZTogMC44NWVtO1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdGZvbnQtd2VpZ2h0OiA3MDA7XG5cdG1hcmdpbjogMCAwIDAgMDtcblx0d2lkdGg6IGNhbGMoMTAwJSAtIDcwcHgpO1xuXHRjb2xvcjogcmdiYSgxNDUsMTQ1LDE0NSwwLjcpO1xufVxuXG4uZHVtbXktbWVkaWEtb2JqZWN0OmhvdmVyIGgzIHtcblx0Y29sb3I6IHJnYmEoMjM2LDkwLDk4LDEpO1xufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1My4xMjVlbSkge1xuXHQubW9ycGhzZWFyY2gtaW5wdXQge1xuXHRcdHBhZGRpbmc6IDAgMjUlIDAgMTBweDtcblx0fVxuXHQubW9ycGhzZWFyY2gub3BlbiAubW9ycGhzZWFyY2gtaW5wdXQge1xuXHRcdGZvbnQtc2l6ZTogMmVtO1xuXHR9XG5cdC5kdW1teS1jb2x1bW4ge1xuXHRcdGZsb2F0OiBub25lO1xuXHRcdHdpZHRoOiBhdXRvO1xuXHRcdHBhZGRpbmc6IDAgMCAyZW07XG5cdH1cblx0LmR1bW15LWNvbHVtbjpudGgtY2hpbGQoMikge1xuXHRcdG1hcmdpbjogMDtcblx0fVxuXHQubW9ycGhzZWFyY2gub3BlbiAubW9ycGhzZWFyY2gtc3VibWl0IHtcblx0XHQtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwtNTAlLDApIHNjYWxlM2QoMC41LDAuNSwxKTtcblx0XHR0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsLTUwJSwwKSBzY2FsZTNkKDAuNSwwLjUsMSk7XG5cdH1cbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAuNjI1ZW0pIHtcblx0Lm1vcnBoc2VhcmNoIHtcblx0XHR3aWR0aDogODAlO1xuXHRcdHRvcDogMTAlO1xuXHRcdHJpZ2h0OiAxMCU7XG5cdH1cbn0iLCJrcy1vdmVyZmxvdyggdmFsdWUsIGFyZ3MuLi4gKVxuICAgIGlmIHZhbHVlID09IGVsbGlwc2lzXG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXBcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXNcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlblxuICAgIGVsc2VcbiAgICAgICAgb3ZlcmZsb3c6IHZhbHVlIGFyZ3Ncblxub3ZlcmZsb3cgPSBrcy1vdmVyZmxvdyB1bmxlc3Mga3Mtbm8tY29uZmxpY3RcbiIsImNhbGxlZC1mcm9tID0gKClcblxudmVuZG9ycyA9IG1veiB3ZWJraXQgbyBtcyBvZmZpY2lhbFxuXG4vLyBzdHJpbmdpZnkgdGhlIGdpdmVuIGFyZ1xuXG4tc3RyaW5nKGFyZylcbiAgdHlwZShhcmcpICsgJyAnICsgYXJnXG5cbi8vIHJlcXVpcmUgYSBjb2xvclxuXG5yZXF1aXJlLWNvbG9yKGNvbG9yKVxuICB1bmxlc3MgY29sb3IgaXMgYSAnY29sb3InXG4gICAgZXJyb3IoJ1JHQiBvciBIU0wgdmFsdWUgZXhwZWN0ZWQsIGdvdCBhICcgKyAtc3RyaW5nKGNvbG9yKSlcblxuLy8gcmVxdWlyZSBhIHVuaXRcblxucmVxdWlyZS11bml0KG4pXG4gIHVubGVzcyBuIGlzIGEgJ3VuaXQnXG4gICAgZXJyb3IoJ3VuaXQgZXhwZWN0ZWQsIGdvdCBhICcgKyAtc3RyaW5nKG4pKVxuXG4vLyByZXF1aXJlIGEgc3RyaW5nXG5cbnJlcXVpcmUtc3RyaW5nKHN0cilcbiAgdW5sZXNzIHN0ciBpcyBhICdzdHJpbmcnIG9yIHN0ciBpcyBhICdpZGVudCdcbiAgICBlcnJvcignc3RyaW5nIGV4cGVjdGVkLCBnb3QgYSAnICsgLXN0cmluZyhzdHIpKVxuXG4vLyBNYXRoIGZ1bmN0aW9uc1xuXG5hYnMobikgeyBtYXRoKG4sICdhYnMnKSB9XG5taW4oYSwgYikgeyBhIDwgYiA/IGEgOiBiIH1cbm1heChhLCBiKSB7IGEgPiBiID8gYSA6IGIgfVxuXG4vLyBUcmlnb25vbWV0cmljc1xuUEkgPSAtbWF0aC1wcm9wKCdQSScpXG5cbnJhZGlhbnMtdG8tZGVncmVlcyhhbmdsZSlcbiAgYW5nbGUgKiAoMTgwIC8gUEkpXG5cbmRlZ3JlZXMtdG8tcmFkaWFucyhhbmdsZSlcbiAgdW5pdChhbmdsZSAqIChQSSAvIDE4MCksJycpXG5cbnNpbihuKVxuICBuID0gZGVncmVlcy10by1yYWRpYW5zKG4pIGlmIHVuaXQobikgPT0gJ2RlZydcbiAgcm91bmQobWF0aChuLCAnc2luJyksIDkpXG5cbmNvcyhuKVxuICBuID0gZGVncmVlcy10by1yYWRpYW5zKG4pIGlmIHVuaXQobikgPT0gJ2RlZydcbiAgcm91bmQobWF0aChuLCAnY29zJyksIDkpXG5cbi8vIFJvdW5kaW5nIE1hdGggZnVuY3Rpb25zXG5cbmNlaWwobiwgcHJlY2lzaW9uID0gMClcbiAgbXVsdGlwbGllciA9IDEwICoqIHByZWNpc2lvblxuICBtYXRoKG4gKiBtdWx0aXBsaWVyLCAnY2VpbCcpIC8gbXVsdGlwbGllclxuXG5mbG9vcihuLCBwcmVjaXNpb24gPSAwKVxuICBtdWx0aXBsaWVyID0gMTAgKiogcHJlY2lzaW9uXG4gIG1hdGgobiAqIG11bHRpcGxpZXIsICdmbG9vcicpIC8gbXVsdGlwbGllclxuXG5yb3VuZChuLCBwcmVjaXNpb24gPSAwKVxuICBtdWx0aXBsaWVyID0gMTAgKiogcHJlY2lzaW9uXG4gIG1hdGgobiAqIG11bHRpcGxpZXIsICdyb3VuZCcpIC8gbXVsdGlwbGllclxuXG4vLyByZXR1cm4gdGhlIHN1bSBvZiB0aGUgZ2l2ZW4gbnVtYmVyc1xuXG5zdW0obnVtcylcbiAgc3VtID0gMFxuICBzdW0gKz0gbiBmb3IgbiBpbiBudW1zXG5cbi8vIHJldHVybiB0aGUgYXZlcmFnZSBvZiB0aGUgZ2l2ZW4gbnVtYmVyc1xuXG5hdmcobnVtcylcbiAgc3VtKG51bXMpIC8gbGVuZ3RoKG51bXMpXG5cbi8vIHJldHVybiBhIHVuaXRsZXNzIG51bWJlciwgb3IgcGFzcyB0aHJvdWdoXG5cbnJlbW92ZS11bml0KG4pXG4gIGlmIHR5cGVvZihuKSBpcyBcInVuaXRcIlxuICAgIHVuaXQobiwgXCJcIilcbiAgZWxzZVxuICAgIG5cblxuLy8gY29udmVydCBhIHBlcmNlbnQgdG8gYSBkZWNpbWFsLCBvciBwYXNzIHRocm91Z2hcblxucGVyY2VudC10by1kZWNpbWFsKG4pXG4gIGlmIHVuaXQobikgaXMgXCIlXCJcbiAgICByZW1vdmUtdW5pdChuKSAvIDEwMFxuICBlbHNlXG4gICAgblxuXG4vLyBjaGVjayBpZiBuIGlzIGFuIG9kZCBudW1iZXJcblxub2RkKG4pXG4gIDEgPT0gbiAlIDJcblxuLy8gY2hlY2sgaWYgbiBpcyBhbiBldmVuIG51bWJlclxuXG5ldmVuKG4pXG4gIDAgPT0gbiAlIDJcblxuLy8gY2hlY2sgaWYgY29sb3IgaXMgbGlnaHRcblxubGlnaHQoY29sb3IpXG4gIGxpZ2h0bmVzcyhjb2xvcikgPj0gNTAlXG5cbi8vIGNoZWNrIGlmIGNvbG9yIGlzIGRhcmtcblxuZGFyayhjb2xvcilcbiAgbGlnaHRuZXNzKGNvbG9yKSA8IDUwJVxuXG4vLyBkZXNhdHVyYXRlIGNvbG9yIGJ5IGFtb3VudFxuXG5kZXNhdHVyYXRlKGNvbG9yLCBhbW91bnQpXG4gIGFkanVzdChjb2xvciwgJ3NhdHVyYXRpb24nLCAtIGFtb3VudClcblxuLy8gc2F0dXJhdGUgY29sb3IgYnkgYW1vdW50XG5cbnNhdHVyYXRlKGNvbG9yID0gJycsIGFtb3VudCA9IDEwMCUpXG4gIGlmIGNvbG9yIGlzIGEgJ2NvbG9yJ1xuICAgIGFkanVzdChjb2xvciwgJ3NhdHVyYXRpb24nLCBhbW91bnQpXG4gIGVsc2VcbiAgICB1bnF1b3RlKCBcInNhdHVyYXRlKFwiICsgY29sb3IgKyBcIilcIiApXG5cbi8vIGRhcmtlbiBieSB0aGUgZ2l2ZW4gYW1vdW50XG5cbmRhcmtlbihjb2xvciwgYW1vdW50KVxuICBhZGp1c3QoY29sb3IsICdsaWdodG5lc3MnLCAtIGFtb3VudClcblxuLy8gbGlnaHRlbiBieSB0aGUgZ2l2ZW4gYW1vdW50XG5cbmxpZ2h0ZW4oY29sb3IsIGFtb3VudClcbiAgYWRqdXN0KGNvbG9yLCAnbGlnaHRuZXNzJywgYW1vdW50KVxuXG4vLyBkZWNyZWFzZSBvcGFjaXR5IGJ5IGFtb3VudFxuXG5mYWRlLW91dChjb2xvciwgYW1vdW50KVxuICBjb2xvciAtIHJnYmEoYmxhY2ssIHBlcmNlbnQtdG8tZGVjaW1hbChhbW91bnQpKVxuXG4vLyBpbmNyZWFzZSBvcGFjaXR5IGJ5IGFtb3VudFxuXG5mYWRlLWluKGNvbG9yLCBhbW91bnQpXG4gIGNvbG9yICsgcmdiYShibGFjaywgcGVyY2VudC10by1kZWNpbWFsKGFtb3VudCkpXG5cbi8vIHNwaW4gaHVlIGJ5IGEgZ2l2ZW4gYW1vdW50XG5cbnNwaW4oY29sb3IsIGFtb3VudClcbiAgY29sb3IgKyB1bml0KGFtb3VudCwgZGVnKVxuXG4vLyBtaXggdHdvIGNvbG9ycyBieSBhIGdpdmVuIGFtb3VudFxuXG5taXgoY29sb3IxLCBjb2xvcjIsIHdlaWdodCA9IDUwJSlcbiAgdW5sZXNzIHdlaWdodCBpbiAwLi4xMDBcbiAgICBlcnJvcihcIldlaWdodCBtdXN0IGJlIGJldHdlZW4gMCUgYW5kIDEwMCVcIilcblxuICBpZiBsZW5ndGgoY29sb3IxKSA9PSAyXG4gICAgd2VpZ2h0ID0gY29sb3IxWzBdXG4gICAgY29sb3IxID0gY29sb3IxWzFdXG5cbiAgZWxzZSBpZiBsZW5ndGgoY29sb3IyKSA9PSAyXG4gICAgd2VpZ2h0ID0gMTAwIC0gY29sb3IyWzBdXG4gICAgY29sb3IyID0gY29sb3IyWzFdXG5cbiAgcmVxdWlyZS1jb2xvcihjb2xvcjEpXG4gIHJlcXVpcmUtY29sb3IoY29sb3IyKVxuXG4gIHAgPSB1bml0KHdlaWdodCAvIDEwMCwgJycpXG4gIHcgPSBwICogMiAtIDFcblxuICBhID0gYWxwaGEoY29sb3IxKSAtIGFscGhhKGNvbG9yMilcblxuICB3MSA9ICgoKHcgKiBhID09IC0xKSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyXG4gIHcyID0gMSAtIHcxXG5cbiAgY2hhbm5lbHMgPSAocmVkKGNvbG9yMSkgcmVkKGNvbG9yMikpIChncmVlbihjb2xvcjEpIGdyZWVuKGNvbG9yMikpIChibHVlKGNvbG9yMSkgYmx1ZShjb2xvcjIpKVxuICByZ2IgPSAoKVxuXG4gIGZvciBwYWlyIGluIGNoYW5uZWxzXG4gICAgcHVzaChyZ2IsIGZsb29yKHBhaXJbMF0gKiB3MSArIHBhaXJbMV0gKiB3MikpXG5cbiAgYTEgPSBhbHBoYShjb2xvcjEpICogcFxuICBhMiA9IGFscGhhKGNvbG9yMikgKiAoMSAtIHApXG4gIGFscGhhID0gYTEgKyBhMlxuXG4gIHJnYmEocmdiWzBdLCByZ2JbMV0sIHJnYlsyXSwgYWxwaGEpXG5cbi8vIGludmVydCBjb2xvcnMsIGxlYXZlIGFscGhhIGludGFjdFxuXG5pbnZlcnQoY29sb3IgPSAnJylcbiAgaWYgY29sb3IgaXMgYSAnY29sb3InXG4gICAgcmdiYSgjZmZmIC0gY29sb3IsIGFscGhhKGNvbG9yKSlcbiAgZWxzZVxuICAgIHVucXVvdGUoIFwiaW52ZXJ0KFwiICsgY29sb3IgKyBcIilcIiApXG5cbi8vIGdpdmUgY29tcGxlbWVudCBvZiB0aGUgZ2l2ZW4gY29sb3JcblxuY29tcGxlbWVudCggY29sb3IgKVxuICBzcGluKCBjb2xvciwgMTgwIClcblxuLy8gZ2l2ZSBncmF5c2NhbGUgb2YgdGhlIGdpdmVuIGNvbG9yXG5cbmdyYXlzY2FsZSggY29sb3IgPSAnJyApXG4gIGlmIGNvbG9yIGlzIGEgJ2NvbG9yJ1xuICAgIGRlc2F0dXJhdGUoIGNvbG9yLCAxMDAlIClcbiAgZWxzZVxuICAgIHVucXVvdGUoIFwiZ3JheXNjYWxlKFwiICsgY29sb3IgKyBcIilcIiApXG5cbi8vIG1peCB0aGUgZ2l2ZW4gY29sb3Igd2l0aCB3aGl0ZVxuXG50aW50KCBjb2xvciwgcGVyY2VudCApXG4gIG1peCggd2hpdGUsIGNvbG9yLCBwZXJjZW50IClcblxuLy8gbWl4IHRoZSBnaXZlbiBjb2xvciB3aXRoIGJsYWNrXG5cbnNoYWRlKCBjb2xvciwgcGVyY2VudCApXG4gIG1peCggYmxhY2ssIGNvbG9yLCBwZXJjZW50IClcblxuLy8gcmV0dXJuIHRoZSBsYXN0IHZhbHVlIGluIHRoZSBnaXZlbiBleHByXG5cbmxhc3QoZXhwcilcbiAgZXhwcltsZW5ndGgoZXhwcikgLSAxXVxuXG4vLyByZXR1cm4ga2V5cyBpbiB0aGUgZ2l2ZW4gcGFpcnMgb3Igb2JqZWN0XG5cbmtleXMocGFpcnMpXG4gIHJldCA9ICgpXG4gIGlmIHR5cGUocGFpcnMpID09ICdvYmplY3QnXG4gICAgZm9yIGtleSBpbiBwYWlyc1xuICAgICAgcHVzaChyZXQsIGtleSlcbiAgZWxzZVxuICAgIGZvciBwYWlyIGluIHBhaXJzXG4gICAgICBwdXNoKHJldCwgcGFpclswXSk7XG4gIHJldFxuXG4vLyByZXR1cm4gdmFsdWVzIGluIHRoZSBnaXZlbiBwYWlycyBvciBvYmplY3RcblxudmFsdWVzKHBhaXJzKVxuICByZXQgPSAoKVxuICBpZiB0eXBlKHBhaXJzKSA9PSAnb2JqZWN0J1xuICAgIGZvciBrZXksIHZhbCBpbiBwYWlyc1xuICAgICAgcHVzaChyZXQsIHZhbClcbiAgZWxzZVxuICAgIGZvciBwYWlyIGluIHBhaXJzXG4gICAgICBwdXNoKHJldCwgcGFpclsxXSk7XG4gIHJldFxuXG4vLyBqb2luIHZhbHVlcyB3aXRoIHRoZSBnaXZlbiBkZWxpbWl0ZXJcblxuam9pbihkZWxpbSwgdmFscy4uLilcbiAgYnVmID0gJydcbiAgdmFscyA9IHZhbHNbMF0gaWYgbGVuZ3RoKHZhbHMpID09IDFcbiAgZm9yIHZhbCwgaSBpbiB2YWxzXG4gICAgYnVmICs9IGkgPyBkZWxpbSArIHZhbCA6IHZhbFxuXG4vLyBhZGQgYSBDU1MgcnVsZSB0byB0aGUgY29udGFpbmluZyBibG9ja1xuXG4vLyAtIFRoaXMgZGVmaW5pdGlvbiBhbGxvd3MgYWRkLXByb3BlcnR5IHRvIGJlIHVzZWQgYXMgYSBtaXhpblxuLy8gLSBJdCBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGludGVycG9sYXRpb24gYnV0IGFsbG93cyB1c2Vyc1xuLy8gICB0byBvcHQgZm9yIGEgZnVuY3Rpb25hbCBzdHlsZVxuXG5hZGQtcHJvcGVydHktZnVuY3Rpb24gPSBhZGQtcHJvcGVydHlcbmFkZC1wcm9wZXJ0eShuYW1lLCBleHByKVxuICBpZiBtaXhpblxuICAgIHtuYW1lfSBleHByXG4gIGVsc2VcbiAgICBhZGQtcHJvcGVydHktZnVuY3Rpb24obmFtZSwgZXhwcilcblxucHJlZml4LWNsYXNzZXMocHJlZml4KVxuICAtcHJlZml4LWNsYXNzZXMocHJlZml4LCBibG9jaylcblxuLy8gQ2FjaGluZyBtaXhpbiwgdXNlIGluc2lkZSB5b3VyIGZ1bmN0aW9ucyB0byBlbmFibGUgY2FjaGluZyBieSBleHRlbmRpbmcuXG5cbiRzdHlsdXNfbWl4aW5fY2FjaGUgPSB7fVxuY2FjaGUoKVxuICAka2V5ID0gKGN1cnJlbnQtbWVkaWEoKSBvciAnbm8tbWVkaWEnKSArICdfXycgKyBjYWxsZWQtZnJvbVswXSArICdfXycgKyBhcmd1bWVudHNcbiAgaWYgJGtleSBpbiAkc3R5bHVzX21peGluX2NhY2hlXG4gICAgQGV4dGVuZCB7XCIkY2FjaGVfcGxhY2Vob2xkZXJfZm9yX1wiICsgJHN0eWx1c19taXhpbl9jYWNoZVska2V5XX1cbiAgZWxzZSBpZiAnY2FjaGUnIGluIGNhbGxlZC1mcm9tXG4gICAge2Jsb2NrfVxuICBlbHNlXG4gICAgJGlkID0gbGVuZ3RoKCRzdHlsdXNfbWl4aW5fY2FjaGUpXG5cbiAgICAmLFxuICAgIC8kY2FjaGVfcGxhY2Vob2xkZXJfZm9yX3skaWR9XG4gICAgICAkc3R5bHVzX21peGluX2NhY2hlWyRrZXldID0gJGlkXG4gICAgICB7YmxvY2t9XG4iLCIuc2tpcFxuXHRwb3NpdGlvbjogZml4ZWRcblx0bGVmdDogMFxuXHRiYWNrZ3JvdW5kOiBpbmstY29sb3Jcblx0Y29sb3I6ICNmZmYvL1RPRE9cblx0cGFkZGluZzogMTBweCAwXG5cdGxldHRlci1zcGFjaW5nOiAxcHhcblx0bGluZS1oZWlnaHQ6IDEuNzVlbVxuXHR0ZXh0LWFsaWduOiBjZW50ZXJcblx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZVxuXHR0b3A6IC0xMi41ZW1cblx0dHJhbnNpdGlvbjogdG9wIDAuM3MgZWFzZVxuXHR3aWR0aDogMTAwJVxuXHR6LWluZGV4OiA2MDBcblx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmVcblx0b3V0bGluZTogbm9uZVxuXHRfc2hhZG93KDIpXG5cdCY6aG92ZXJcblx0XHRiYWNrZ3JvdW5kOiBpbmstY29sb3Jcblx0Jjpmb2N1cyBcblx0XHR0b3A6IDAiLCJtYWluXG5cdHBhZGRpbmctdG9wOiBsYXlvdXRfaGVhZGVyLWhlaWdodDtcblx0cGFkZGluZy1sZWZ0OiBsYXlvdXRfZHJhd2VyLXdpZHRoOyIsIm1haW4gXG5cdHNlY3Rpb25cblx0XHRwYWRkaW5nOiA1MHB4XG5cdFx0LmNvbnRlbnRcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZVxuXHRcdFx0YmFja2dyb3VuZC1jb2xvcjogcGFwZXItY29sb3Jcblx0XHRcdF9zaGFkb3coMSlcblx0XHRcdFxuXHRcdGFydGljbGVcblx0XHRcdEBpbXBvcnQgXCJfY29udGFjdHNcIlxuXHRcdFx0cGFkZGluZzogNTBweFxuXHRcdFx0Y29sb3I6IGluay1jb2xvclxuXHRcdFx0b3ZlcmZsb3cteDogYXV0b1xuXHRcdFx0bWF4LXdpZHRoOiA3NjhweFxuXHRcdFx0bWFyZ2luOiAwcHggYXV0b1xuXHRcdFx0XG5cdFx0XHQ+cDpmaXJzdC1vZi10eXBlXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDJlbVxuXHRcdFx0XHRmb250LXNpemU6IDEuNGVtXG5cdFx0XHRcdGxpbmUtaGVpZ2h0OiAxLjNlbVxuXHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXJcblx0XHRcdFx0Ly8gJjo6Zmlyc3QtbGV0dGVyXG5cdFx0XHRcdC8vIFx0Zm9udC1zaXplOiAyLjVlbVxuXHRcdFx0XHQvLyBcdGZsb2F0OiBsZWZ0XG5cdFx0XHRcdC8vIFx0cGFkZGluZzogMTBweCAyMHB4O1xuXHRcdFx0XHQvLyBcdGhlaWdodDogNjRweDtcblx0XHRcdFx0Ly8gXHRtYXJnaW4tcmlnaHQ6IDEwcHg7XG5cdFx0XHRcdC8vIFx0bGluZS1oZWlnaHQ6IDFlbVxuXHRcdFx0XHQvLyBcdGJvcmRlcjogNHB4IHNvbGlkIG9yYW5nZVxuXHRcdFx0XHQvLyBcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHRcdCY6YWZ0ZXJcblx0XHRcdFx0XHRkaXNwbGF5OmJsb2NrXG5cdFx0XHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGxpZ2h0ZW4odGVydGlhcnktY29sb3IsIDIwKVxuXHRcdFx0XHRcdGNvbnRlbnQ6ICcnXG5cdFx0XHRcdFx0d2lkdGg6IDUwJVxuXHRcdFx0XHRcdG1hcmdpbjogMjBweCBhdXRvXG5cdFx0XHRcdFx0XG5cdFx0XHRwXG5cdFx0XHRcdEBleHRlbmRzIC5mb250LWFydGljbGVcblx0XHRcdFx0Zm9udC1zaXplOiAxLjJlbVxuXHRcdFx0XHRsaW5lLWhlaWdodDogMS40ZW1cblx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMmVtXG5cdFx0XHRcdHRleHQtYWxpZ246IGp1c3RpZnlcblx0XHRcdGgxXG5cdFx0XHRcdGZvbnQtc2l6ZTogMy41ZW1cblx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMC4zZW07XG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlclxuXHRcdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlXG5cdFx0XHRcdGZvbnQtd2VpZ2h0OiBib2xkXG5cdFx0XHRcdGNvbG9yOiBsaWdodGVuKGluay1jb2xvciwgMTApXG5cdFx0XHRoMlxuXHRcdFx0XHRmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHNcblx0XHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAxZW1cblx0XHRcdFx0YS5hbmNob3Jcblx0XHRcdFx0XHR2aXNpYmlsaXR5OiBoaWRkZW5cblx0XHRcdFx0XHR3aWR0aDowcHhcblx0XHRcdFx0XHRwYWRkaW5nLXRvcDogbGF5b3V0X2hlYWRlci1oZWlnaHRcblx0XHRcdFx0XHRtYXJnaW4tdG9wOiAtbGF5b3V0X2hlYWRlci1oZWlnaHRcblx0XHRcdFx0XHRtYXJnaW4tbGVmdDogLTQ1cHg7XG5cdFx0XHRcdFx0YmFja2dyb3VuZDpub25lXG5cdFx0XHRcdFx0Ym9yZGVyOm5vbmVcblx0XHRcdFx0XHRzcGFuXG5cdFx0XHRcdFx0XHRwYWRkaW5nOiAxMHB4XG5cdFx0XHRcdFx0XHR3aWR0aDoxMDBweFxuXHRcdFx0XHRcdFx0JjphZnRlclxuXHRcdFx0XHRcdFx0XHR3aWR0aDogMHB4XG5cdFx0XHRcdFx0XHRcdGNvbnRlbnQ6ICdMaW5rJ1xuXHRcdFx0XHQmOmhvdmVyXG5cdFx0XHRcdFx0YS5hbmNob3Jcblx0XHRcdFx0XHRcdHZpc2liaWxpdHk6IHZpc2libGVcblx0XHRcdFx0XHRcdFxuXHRcdFx0YmxvY2txdW90ZVxuXHRcdFx0XHRib3JkZXItbGVmdDogNXB4IHNvbGlkIHNlY29uZGFyeS1jb2xvclxuXHRcdFx0XHQvLyBjb2xvcjogI0ZGRlxuXHRcdFx0XHQvLyBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGVuKHRlcnRpYXJ5LWNvbG9yLCAxMClcblx0XHRcdFx0bWFyZ2luOiAwIDAgMjBweCAwXG5cdFx0XHRcdHBhZGRpbmc6IDEwcHggNDBweFxuXHRcdFx0XHRwXG5cdFx0XHRcdFx0Ly8gQGV4dGVuZHMgLmZvbnQtbWFpblxuXHRcdFx0XHRcdC8vIGZvbnQtd2VpZ2h0OiBsaWdodGVyXG5cdFx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMHB4XG5cdFx0XHRcdFx0Zm9udC1zdHlsZTogaXRhbGljXG5cdFx0XHRcdFxuXHRcdFx0LmFydGljbGUtLXNoYXJlXG5cdFx0XHRcdHBvc2l0aW9uOmFic29sdXRlXG5cdFx0XHRcdHRvcDogMTBweFxuXHRcdFx0XHRyaWdodDogMTBweFxuXHRcdFx0XHRjb2xvcjogbGlnaHRlbihpbmstY29sb3IsIDUwKVxuXHRcdFx0XHRmb250LXdlaWdodDogbGlnaHRlclxuXHRcdFx0XHQmOmhvdmVyXG5cdFx0XHRcdFx0Y29sb3I6IGxpZ2h0ZW4oaW5rLWNvbG9yLCAyMClcblx0XHRcdFx0XHRjdXJzb3I6IHBvaW50ZXJcblxuIiwiaW1hZ2Utc2l6ZSA9IDE1ZW1cblxuLmNvbnRhY3RzXG5cdG1hcmdpbjogYXV0b1xuXHRkaXNwbGF5OiBmbGV4XG5cdGZsZXgtd3JhcDogd3JhcFxuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlclxuLmNvbnRhY3Rcblx0ZmxleDogMCAwIGF1dG9cblx0bWFyZ2luOmF1dG9cblx0ZGlzcGxheTogaW5saW5lLWJsb2NrXG5cdG1hcmdpbjogMmVtXG5cdGRpdlxuXHRcdG1hcmdpbjphdXRvXG5cdFx0d2lkdGg6IGltYWdlLXNpemVcblx0XHRoZWlnaHQ6IGltYWdlLXNpemVcblx0XHRib3JkZXItcmFkaXVzOiAoaW1hZ2Utc2l6ZS8yKVxuXHRcdGJhY2tncm91bmQtc2l6ZTogY292ZXJcblx0XHRiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXJcblx0YWRkcmVzc1xuXHRcdG1hcmdpbjogMWVtXG5cdFx0c3BhblxuXHRcdFx0ZGlzcGxheTpibG9ja1xuXHRcdFx0dGV4dC1hbGlnbjogY2VudGVyXG5cdFx0XHRmb250LXdlaWdodDogNDAwXG5cdFx0XHRwYWRkaW5nOiAycHhcblx0XHRcdGFcblx0XHRcdFx0cGFkZGluZzogMnB4Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9 */
