.font-main {
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.font-article,
main section article p {
  font-family: 'Times New Roman', Times, serif;
}
div,
span,
h1,
h2,
h3,
p,
a,
i,
ol,
ul,
li,
fieldset,
form,
label,
input,
address,
section,
header {
  margin: 0px;
  padding: 0px;
  border: 0px;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  box-sizing: border-box;
}
ol,
ul {
  list-style: none;
}
html,
body {
  padding: 0;
  margin: 0;
  height: 100%;
}
body {
  color: #333;
  background: #f1f1f1;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 16px;
  overflow-x: hidden;
}
a {
  text-decoration: none;
  color: #333;
  border-bottom: 1px dotted #333;
}
a:hover {
  background-color: #ffa500;
  border: none;
}
.site-intro header {
  padding-left: 17em;
  position: fixed;
  width: 100%;
  top: 0px;
  height: 65px;
  z-index: 100;
  background-color: #7bc2d4;
  box-shadow: 0px 2px 1px 1px rgba(0,0,0,0.15);
}
.site-intro header h1 {
  color: #fff;
}
.site-intro header h1:before {
  content: 'LOGO';
  margin-right: 20px;
}
.search {
  display: none;
}
.login {
  display: none;
}
.share {
  display: none;
}
.brand {
  display: none;
  height: 130px;
  background: #333;
  text-align: center;
}
.brand span {
  line-height: 130px;
  color: #fff;
}
.navigation,
.site-intro .site-navigation,
.context-options {
  background: #fff;
  position: fixed;
  width: 17em;
  bottom: 0px;
  z-index: 50;
  overflow-x: auto;
  top: 65px;
}
.site-intro .site-navigation {
  z-index: 200;
  top: 0px;
  box-shadow: 1px 2px 1px 1px rgba(0,0,0,0.15);
  left: 0px;
}
.site-intro .site-navigation.toggle {
  background: #f00;
}
.context-options {
  right: 0px;
  right: -17em;
  box-shadow: -1px 1px 0.5px 1px rgba(0,0,0,0.15);
}
.context-options .share {
  position: absolute;
  float: right;
}
.navigation-main >ul>li>a:first-of-type {
  border-bottom: 1px solid #f2f2f2;
}
.navigation-main li {
  display: block;
  cursor: pointer;
}
.navigation-main li a {
  border-bottom: none;
  display: block;
  text-decoration: none;
  text-transform: capitalize;
  color: #333;
}
.navigation-main li a:hover {
  color: #000;
  background-color: #f2f2f2;
}
.navigation-main li.active >a {
  color: #000;
}
.navigation-main >ul>li >a {
  padding: 15px 20px;
}
.navigation-main >ul>li >ul >li >a {
  padding: 15px 20px;
}
.navigation-main >ul>li >ul >li >a:after {
  position: absolute;
  right: 10px;
}
.navigation-main >ul>li >ul >li >a.expandable:after {
  content: "+";
}
.navigation-main >ul>li >ul >li >ul {
  display: none;
}
.navigation-main >ul>li >ul >li >ul >li >a {
  padding: 7px 20px 7px 20px;
  color: #808080;
}
.navigation-main >ul>li >ul >li >ul >li >a:hover {
  background-color: inherit;
}
.navigation-main >ul>li >ul >li.active ul {
  display: block;
}
.navigation-main >ul>li >ul >li.active a.expandable:after {
  content: "-";
}
.skip {
  position: fixed;
  left: 0;
  background: #333;
  color: #fff;
  padding: 10px 0;
  letter-spacing: 1px;
  line-height: 1.75em;
  text-align: center;
  text-transform: uppercase;
  top: -12.5em;
  transition: top 0.3s ease;
  width: 100%;
  z-index: 600;
  text-decoration: underline;
  outline: none;
  box-shadow: 0px 2px 1px 1px rgba(0,0,0,0.15);
}
.skip:hover {
  background: #333;
}
.skip:focus {
  top: 0;
}
main {
  padding-top: 65px;
  padding-left: 17em;
}
main section .content {
  position: relative;
  background-color: #fff;
  box-shadow: 0px 1px 0.5px 1px rgba(0,0,0,0.15);
}
main section article {
  padding: 50px;
  color: #333;
  overflow-x: auto;
  max-width: 768px;
  margin: 0px auto;
}
main section article .contacts {
  margin: auto;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-justify-content: center;
  -ms-justify-content: center;
  -ms-flex-pack: center;
      justify-content: center;
}
main section article .contact {
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  margin: auto;
  display: inline-block;
  margin: 2em;
}
main section article .contact div {
  margin: auto;
  width: 15em;
  height: 15em;
  border-radius: 7.5em;
  background-size: cover;
  background-position: center;
}
main section article .contact address {
  margin: 1em;
}
main section article .contact address span {
  display: block;
  text-align: center;
  font-weight: 400;
  padding: 2px;
}
main section article .contact address span a {
  padding: 2px;
}
main section article >p:first-of-type {
  margin-bottom: 2em;
  font-size: 1.4em;
  line-height: 1.3em;
  text-align: center;
}
main section article >p:first-of-type:after {
  display: block;
  border-bottom: 1px solid #e2c8ed;
  content: '';
  width: 50%;
  margin: 20px auto;
}
main section article p {
  font-size: 1.2em;
  line-height: 1.4em;
  margin-bottom: 2em;
  text-align: justify;
}
main section article h1 {
  font-size: 3.5em;
  margin-bottom: 0.3em;
  text-align: center;
  text-transform: uppercase;
  font-weight: bold;
  color: #4d4d4d;
}
main section article h2 {
  font-variant: small-caps;
  border-bottom: 1px dotted;
  margin-bottom: 1em;
}
main section article h2 a.anchor {
  visibility: hidden;
  width: 0px;
  padding-top: 65px;
  margin-top: -layout_header-height;
  margin-left: -45px;
  background: none;
  border: none;
}
main section article h2 a.anchor span {
  padding: 10px;
  width: 100px;
}
main section article h2 a.anchor span:after {
  width: 0px;
  content: 'Link';
}
main section article h2:hover a.anchor {
  visibility: visible;
}
main section article blockquote {
  border-left: 5px solid #95d47b;
  margin: 0 0 20px 0;
  padding: 10px 40px;
}
main section article blockquote p {
  margin-bottom: 0px;
  font-style: italic;
}
main section article .article--share {
  position: absolute;
  top: 10px;
  right: 10px;
  color: #b3b3b3;
  font-weight: lighter;
}
main section article .article--share:hover {
  color: #666;
  cursor: pointer;
}

/*# sourceMappingURL=data:application/json;base64, */
